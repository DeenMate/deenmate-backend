// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Quran Module - Updated for Live Sync
model QuranChapter {
  id             Int             @id @default(autoincrement())
  chapterNumber  Int             @unique @map("chapter_number")
  nameArabic     String          @map("name_arabic")
  nameSimple     String?         @map("name_simple")
  nameEnglish    String?         @map("name_english")
  nameBangla     String?         @map("name_bangla")
  revelationPlace String?        @map("revelation_place")
  revelationOrder Int?           @map("revelation_order")
  versesCount    Int             @map("verses_count")
  bismillahPre   Boolean         @default(true) @map("bismillah_pre")
  // Sync metadata
  source         String          @default("quran.com") @map("source")
  lastSynced     DateTime        @default(now()) @map("last_synced")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  verses         QuranVerse[]

  @@map("quran_chapters")
}

model QuranVerse {
  id            Int      @id @default(autoincrement())
  chapterNumber Int      @map("chapter_number")
  verseNumber   Int      @map("verse_number")
  verseKey      String   @unique @map("verse_key")
  textUthmani   String?  @map("text_uthmani")
  textSimple    String?  @map("text_simple")
  textIndopak   String?  @map("text_indopak")
  textImlaei    String?  @map("text_imlaei")
  pageNumber    Int?     @map("page_number")
  juzNumber     Int?     @map("juz_number")
  hizbNumber    Int?     @map("hizb_number")
  rubNumber     Int?     @map("rub_number")
  sajdaType     String?  @map("sajda_type")
  // Sync metadata
  source        String   @default("quran.com") @map("source")
  lastSynced    DateTime @default(now()) @map("last_synced")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // FK (not strict due to upstream variance)
  chapter       QuranChapter? @relation(fields: [chapterNumber], references: [chapterNumber])
  translations  VerseTranslation[]
  audioFiles    QuranAudioFile[]

  @@unique([chapterNumber, verseNumber])
  @@index([chapterNumber])
  @@map("quran_verses")
}

model TranslationResource {
  id           Int      @id @default(autoincrement())
  resourceId   Int      @unique @map("resource_id") // upstream resource id (quran.com)
  languageCode String   @map("language_code")
  name         String
  authorName   String?  @map("author_name")
  languageName String?  @map("language_name")
  direction    String?
  isActive     Boolean  @default(true) @map("is_active")
  // Sync metadata
  source       String   @default("quran.com") @map("source")
  lastSynced   DateTime @default(now()) @map("last_synced")
  createdAt    DateTime @default(now()) @map("created_at")

  translations VerseTranslation[]

  @@map("translation_resources")
}

model VerseTranslation {
  id              Int      @id @default(autoincrement())
  verseId         Int      @map("verse_id")
  resourceId      Int      @map("resource_id")
  text            String
  footnotes       String?
  // Sync metadata
  source          String   @default("quran.com") @map("source")
  lastSynced      DateTime @default(now()) @map("last_synced")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  verse           QuranVerse @relation(fields: [verseId], references: [id], onDelete: Cascade)
  resource        TranslationResource @relation(fields: [resourceId], references: [resourceId])

  @@unique([verseId, resourceId])
  @@index([verseId])
  @@index([resourceId])
  @@map("verse_translations")
}

model QuranReciter {
  id           Int      @id @default(autoincrement())
  sourceId     Int      @map("source_id")
  sourceApi    String   @map("source_api")
  name         String
  englishName  String?  @map("english_name")
  languageName String?  @map("language_name")
  style        String?
  qirat        String?
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  audioFiles  QuranAudioFile[]

  @@map("quran_reciters")
}

model QuranAudioFile {
  id           Int      @id @default(autoincrement())
  verseId      Int      @map("verse_id")
  reciterId    Int      @map("reciter_id")
  sourceUrl    String   @map("source_url")
  localPath    String?  @map("local_path")
  fileSize     Int?     @map("file_size")
  duration     Int?     @map("duration")
  format       String   @default("mp3")
  quality      String?
  lastVerified DateTime? @map("last_verified")
  createdAt    DateTime @default(now()) @map("created_at")

  verse       QuranVerse @relation(fields: [verseId], references: [id], onDelete: Cascade)
  reciter    QuranReciter @relation(fields: [reciterId], references: [id], onDelete: Cascade)

  @@unique([verseId, reciterId])
  @@map("quran_audio_files")
}

// Prayer Times Module - Updated for Live Sync
model PrayerCalculationMethod {
  id           Int      @id @default(autoincrement())
  methodName   String   @unique @map("method_name")
  methodCode   String   @unique @map("method_code")
  description  String?
  fajrAngle    Decimal  @map("fajr_angle") @db.Decimal(4, 2)
  ishaAngle    Decimal  @map("isha_angle") @db.Decimal(4, 2)
  ishaInterval Int?     @map("isha_interval")
  maghribAngle Decimal  @default(0.0) @map("maghrib_angle") @db.Decimal(4, 2)
  midnightMode String   @default("Standard") @map("midnight_mode")
  // Sync metadata
  source       String   @default("aladhan") @map("source")
  lastSynced   DateTime @default(now()) @map("last_synced")
  createdAt    DateTime @default(now()) @map("created_at")

  prayerTimes  PrayerTimes[]

  @@map("prayer_calculation_methods")
}

model PrayerLocation {
  id         Int      @id @default(autoincrement())
  // hashed bucket key for lat/lng rounding (e.g., 3-decimal precision)
  locKey     String   @unique @map("loc_key")
  lat        Float
  lng        Float
  city       String?
  country    String?
  timezone   String?
  elevation  Int      @default(0)
  // Sync metadata
  source     String   @default("aladhan") @map("source")
  lastSynced DateTime @default(now()) @map("last_synced")
  createdAt  DateTime @default(now()) @map("created_at")

  prayerTimes PrayerTimes[]

  @@map("prayer_locations")
}

model PrayerTimes {
  id         Int      @id @default(autoincrement())
  locKey     String
  date       DateTime @db.Date
  method     Int
  school     Int   @default(0) // 0 Shafi, 1 Hanafi (Aladhan's "school" param)
  fajr       DateTime
  sunrise    DateTime
  dhuhr      DateTime
  asr        DateTime
  maghrib    DateTime
  isha       DateTime
  imsak      DateTime?
  midnight   DateTime?
  qiblaDirection Decimal? @map("qibla_direction") @db.Decimal(6, 3)

  // origin metadata
  source     String   // "aladhan"
  lastSynced DateTime @default(now()) @map("last_synced")
  rawResponse Json?   @map("raw_response")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  location   PrayerLocation @relation(fields: [locKey], references: [locKey])
  methodRef  PrayerCalculationMethod @relation(fields: [method], references: [id])

  @@unique([locKey, date, method, school])
  @@index([locKey, date])
  @@map("prayer_times")
}

// Sync Job Logging - New for Live Sync
model SyncJobLog {
  id          Int      @id @default(autoincrement())
  jobName     String   // "quran-daily", "prayer-prewarm"
  resource    String   // "quran-chapters", "quran-verses", "prayer-times"
  startedAt   DateTime @default(now()) @map("started_at")
  finishedAt  DateTime? @map("finished_at")
  status      String   // "success" | "failed" | "partial"
  error       String?
  notes       String?
  
  // Performance metrics
  durationMs  Int?     // Total execution time
  recordsProcessed Int? // Number of records processed
  recordsFailed    Int? // Number of records that failed
  
  // Retry information
  retryCount  Int      @default(0) @map("retry_count")
  lastRetryAt DateTime? @map("last_retry_at")
  
  @@index([jobName, status])
  @@index([startedAt])
  @@index([resource])
  @@map("sync_job_logs")
}

// Finance - Gold/Silver Prices (Append-only)
model GoldPrice {
  id         String   @id @default(uuid())
  metal      String   // "Gold" | "Silver"
  category   String   // e.g., 22K, 21K, 18K, Traditional
  unit       String   // e.g., Vori, Gram
  price      Decimal  @db.Decimal(12, 2)
  currency   String   // e.g., BDT
  change     String?  // "Up" | "Down" | "Unchanged"
  source     String
  fetchedAt  DateTime // when scraped from source
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([metal, category, unit, fetchedAt])
  @@index([fetchedAt])
  @@map("gold_prices")
}

// Hadith Module - Sunnah.com Integration
model HadithCollection {
  id            Int      @id @default(autoincrement())
  name          String   @unique // API slug (bukhari, muslim, etc.)
  titleEn       String   @map("title_en")
  titleBn       String?  @map("title_bn") // Bangla translation
  titleAr       String?  @map("title_ar") // Arabic title
  totalHadith   Int?     @map("total_hadith")
  hasBooks      Boolean  @default(false) @map("has_books")
  // Sync metadata
  source        String   @default("sunnah.com") @map("source")
  lastSyncedAt  DateTime? @map("last_synced_at")
  syncStatus    String   @default("pending") @map("sync_status") // pending | in_progress | ok | failed
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  books         HadithBook[]
  hadiths       Hadith[]

  @@index([name])
  @@index([syncStatus])
  @@map("hadith_collections")
}

model HadithBook {
  id            Int      @id @default(autoincrement())
  collectionId  Int      @map("collection_id")
  number        Int      // Book number from API
  titleEn       String   @map("title_en")
  titleBn       String?  @map("title_bn") // Bangla translation
  titleAr       String?  @map("title_ar") // Arabic title
  totalHadith   Int?     @map("total_hadith")
  // Sync metadata
  source        String   @default("sunnah.com") @map("source")
  lastSyncedAt  DateTime? @map("last_synced_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  collection    HadithCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  hadiths       Hadith[]

  @@unique([collectionId, number])
  @@index([collectionId])
  @@map("hadith_books")
}

model Hadith {
  id            Int      @id @default(autoincrement())
  collectionId  Int      @map("collection_id")
  bookId        Int?     @map("book_id") // null if collection doesn't have books
  hadithNumber  String   @map("hadith_number") // Sunnah.com reference
  textAr        String   @map("text_ar") // Arabic text
  textEn        String   @map("text_en") // English text
  textBn        String?  @map("text_bn") // Bangla translation
  grades        Json?    // Raw grades array from API
  refs          Json?    // Reference info from API
  narrator      String?  // Narrator if provided
  isVerifiedBn  Boolean  @default(false) @map("is_verified_bn") // Human review status for Bangla
  // Sync metadata
  source        String   @default("sunnah.com") @map("source")
  lastUpdatedAt DateTime @default(now()) @map("last_updated_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  collection    HadithCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  book          HadithBook? @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([collectionId, hadithNumber])
  @@index([collectionId])
  @@index([bookId])
  @@index([hadithNumber])
  @@map("hadith_items")
}

// Translation Queue for Bangla translations
model TranslationJob {
  id            Int      @id @default(autoincrement())
  hadithId      Int      @map("hadith_id")
  text          String   // Text to translate
  sourceLang    String   @default("en") @map("source_lang")
  targetLang    String   @default("bn") @map("target_lang")
  status        String   @default("pending") // pending | processing | completed | failed
  translatedText String? @map("translated_text")
  error         String?
  retryCount    Int      @default(0) @map("retry_count")
  maxRetries    Int      @default(3) @map("max_retries")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  completedAt   DateTime? @map("completed_at")

  @@index([status])
  @@index([hadithId])
  @@index([createdAt])
  @@map("translation_jobs")
}

// Admin Authentication
model AdminUser {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  role         String   @default("admin") // admin | super_admin | editor | viewer
  permissions  String[] @default([]) // Array of permission strings
  isActive     Boolean  @default(true) @map("is_active")
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Audit logs
  auditLogs    AdminAuditLog[]

  @@map("admin_users")
}

model AdminAuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  action    String   // CREATE, READ, UPDATE, DELETE, LOGIN, LOGOUT, SYNC, etc.
  resource  String   // quran, hadith, prayer, finance, audio, user, etc.
  resourceId String? @map("resource_id") // ID of the affected resource
  details   Json?    // Additional details about the action
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user      AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

// Zakat Module - Calculation Storage
model ZakatCalculation {
  id              Int      @id @default(autoincrement())
  userId          String?  @map("user_id") // Optional user ID for user-specific calculations
  gold            Decimal  @db.Decimal(10, 2) // Gold amount in grams
  silver          Decimal  @db.Decimal(10, 2) // Silver amount in grams
  cash            Decimal  @db.Decimal(10, 2) // Cash amount
  investments     Decimal  @db.Decimal(10, 2) // Investment amount
  other           Decimal  @db.Decimal(10, 2) // Other assets amount
  currency        String   @default("USD") // Currency code
  totalAssets     Decimal  @db.Decimal(10, 2) @map("total_assets") // Total calculated assets
  nisabThreshold  Decimal  @db.Decimal(10, 2) @map("nisab_threshold") // Nisab threshold for the currency
  zakatAmount     Decimal  @db.Decimal(10, 2) @map("zakat_amount") // Calculated zakat amount
  isZakatable     Boolean  @default(false) @map("is_zakatable") // Whether assets exceed nisab
  calculationDate DateTime @default(now()) @map("calculation_date")
  goldPrice       Decimal? @db.Decimal(10, 2) @map("gold_price") // Gold price used in calculation
  silverPrice     Decimal? @db.Decimal(10, 2) @map("silver_price") // Silver price used in calculation
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([calculationDate])
  @@index([currency])
  @@map("zakat_calculations")
}
