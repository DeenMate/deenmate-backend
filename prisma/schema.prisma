generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuranChapter {
  id              Int          @id @default(autoincrement())
  chapterNumber   Int          @unique @map("chapter_number")
  nameArabic      String       @map("name_arabic")
  nameEnglish     String?      @map("name_english")
  nameBangla      String?      @map("name_bangla")
  revelationPlace String?      @map("revelation_place")
  revelationOrder Int?         @map("revelation_order")
  bismillahPre    Boolean      @default(true) @map("bismillah_pre")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  lastSynced      DateTime     @default(now()) @map("last_synced")
  nameSimple      String?      @map("name_simple")
  source          String       @default("quran.com") @map("source")
  versesCount     Int          @map("verses_count")
  verses          QuranVerse[]

  @@map("quran_chapters")
}

model QuranVerse {
  id            Int                @id @default(autoincrement())
  verseNumber   Int                @map("verse_number")
  verseKey      String             @unique @map("verse_key")
  textUthmani   String?            @map("text_uthmani")
  textIndopak   String?            @map("text_indopak")
  textImlaei    String?            @map("text_imlaei")
  juzNumber     Int?               @map("juz_number")
  hizbNumber    Int?               @map("hizb_number")
  rubNumber     Int?               @map("rub_number")
  pageNumber    Int?               @map("page_number")
  sajdaType     String?            @map("sajda_type")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  chapterNumber Int                @map("chapter_number")
  lastSynced    DateTime           @default(now()) @map("last_synced")
  source        String             @default("quran.com") @map("source")
  textSimple    String?            @map("text_simple")
  audioFiles    QuranAudioFile[]
  chapter       QuranChapter       @relation(fields: [chapterNumber], references: [chapterNumber])
  translations  VerseTranslation[]

  @@unique([chapterNumber, verseNumber])
  @@index([chapterNumber])
  @@map("quran_verses")
}

model TranslationResource {
  id           Int                @id @default(autoincrement())
  resourceId   Int                @unique @map("resource_id")
  languageCode String             @map("language_code")
  name         String
  authorName   String?            @map("author_name")
  languageName String?            @map("language_name")
  direction    String?
  isActive     Boolean            @default(true) @map("is_active")
  source       String             @default("quran.com") @map("source")
  lastSynced   DateTime           @default(now()) @map("last_synced")
  createdAt    DateTime           @default(now()) @map("created_at")
  translations VerseTranslation[]

  @@map("translation_resources")
}

model VerseTranslation {
  id         Int                 @id @default(autoincrement())
  verseId    Int                 @map("verse_id")
  resourceId Int                 @map("resource_id")
  text       String
  footnotes  String?
  source     String              @default("quran.com") @map("source")
  lastSynced DateTime            @default(now()) @map("last_synced")
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")
  resource   TranslationResource @relation(fields: [resourceId], references: [resourceId])
  verse      QuranVerse          @relation(fields: [verseId], references: [id], onDelete: Cascade)

  @@unique([verseId, resourceId])
  @@index([verseId])
  @@index([resourceId])
  @@map("verse_translations")
}

model QuranReciter {
  id           Int              @id @default(autoincrement())
  sourceId     Int              @map("source_id")
  sourceApi    String           @map("source_api")
  name         String
  englishName  String?          @map("english_name")
  languageName String?          @map("language_name")
  style        String?
  qirat        String?
  isActive     Boolean          @default(true) @map("is_active")
  createdAt    DateTime         @default(now()) @map("created_at")
  audioFiles   QuranAudioFile[]

  @@map("quran_reciters")
}

model QuranAudioFile {
  id           Int          @id @default(autoincrement())
  verseId      Int          @map("verse_id")
  reciterId    Int          @map("reciter_id")
  sourceUrl    String       @map("source_url")
  localPath    String?      @map("local_path")
  fileSize     Int?         @map("file_size")
  duration     Int?         @map("duration")
  format       String       @default("mp3")
  quality      String?
  lastVerified DateTime?    @map("last_verified")
  createdAt    DateTime     @default(now()) @map("created_at")
  reciter      QuranReciter @relation(fields: [reciterId], references: [id], onDelete: Cascade)
  verse        QuranVerse   @relation(fields: [verseId], references: [id], onDelete: Cascade)

  @@unique([verseId, reciterId])
  @@map("quran_audio_files")
}

model PrayerCalculationMethod {
  id           Int           @id @default(autoincrement())
  methodName   String        @unique @map("method_name")
  methodCode   String        @unique @map("method_code")
  description  String?
  fajrAngle    Decimal       @map("fajr_angle") @db.Decimal(4, 2)
  ishaAngle    Decimal       @map("isha_angle") @db.Decimal(4, 2)
  ishaInterval Int?          @map("isha_interval")
  maghribAngle Decimal       @default(0.0) @map("maghrib_angle") @db.Decimal(4, 2)
  midnightMode String        @default("Standard") @map("midnight_mode")
  createdAt    DateTime      @default(now()) @map("created_at")
  lastSynced   DateTime      @default(now()) @map("last_synced")
  source       String        @default("aladhan") @map("source")
  prayerTimes  PrayerTimes[]

  @@map("prayer_calculation_methods")
}

model PrayerLocation {
  id          Int           @id @default(autoincrement())
  city        String?
  country     String?
  timezone    String?
  elevation   Int           @default(0)
  createdAt   DateTime      @default(now()) @map("created_at")
  lastSynced  DateTime      @default(now()) @map("last_synced")
  lat         Float
  lng         Float
  locKey      String        @unique @map("loc_key")
  source      String        @default("aladhan") @map("source")
  prayerTimes PrayerTimes[]

  @@map("prayer_locations")
}

model PrayerTimes {
  id                       Int                     @id @default(autoincrement())
  locKey                   String
  date                     DateTime                @db.Date
  method                   Int
  school                   Int                     @default(0)
  fajr                     DateTime
  sunrise                  DateTime
  dhuhr                    DateTime
  asr                      DateTime
  maghrib                  DateTime
  isha                     DateTime
  imsak                    DateTime?
  midnight                 DateTime?
  qiblaDirection           Decimal?                @map("qibla_direction") @db.Decimal(6, 3)
  source                   String
  lastSynced               DateTime                @default(now()) @map("last_synced")
  rawResponse              Json?                   @map("raw_response")
  createdAt                DateTime                @default(now()) @map("created_at")
  latitudeAdjustmentMethod Int?                    @default(0) @map("latitude_adjustment_method")
  midnightMode             String?                 @default("Standard") @map("midnight_mode")
  timezone                 String?                 @map("timezone")
  tune                     String?                 @map("tune")
  location                 PrayerLocation          @relation(fields: [locKey], references: [locKey])
  methodRef                PrayerCalculationMethod @relation(fields: [method], references: [id])

  @@unique([locKey, date, method, school, latitudeAdjustmentMethod, tune])
  @@index([locKey, date])
  @@map("prayer_times")
}

model SyncJobLog {
  id               Int       @id @default(autoincrement())
  jobName          String
  resource         String
  startedAt        DateTime  @default(now()) @map("started_at")
  finishedAt       DateTime? @map("finished_at")
  status           String
  error            String?
  notes            String?
  durationMs       Int?
  recordsProcessed Int?
  recordsFailed    Int?
  retryCount       Int       @default(0) @map("retry_count")
  lastRetryAt      DateTime? @map("last_retry_at")

  @@index([jobName, status])
  @@index([startedAt])
  @@index([resource])
  @@map("sync_job_logs")
}

model GoldPrice {
  id        String   @id @default(uuid())
  metal     String
  category  String
  unit      String
  price     Decimal  @db.Decimal(12, 2)
  currency  String
  change    String?
  source    String
  fetchedAt DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@index([metal, category, unit, fetchedAt])
  @@index([fetchedAt])
  @@map("gold_prices")
}

model HadithCollection {
  id           Int          @id @default(autoincrement())
  name         String       @unique
  titleEn      String       @map("title_en")
  titleBn      String?      @map("title_bn")
  titleAr      String?      @map("title_ar")
  totalHadith  Int?         @map("total_hadith")
  hasBooks     Boolean      @default(false) @map("has_books")
  source       String       @default("sunnah.com") @map("source")
  lastSyncedAt DateTime?    @map("last_synced_at")
  syncStatus   String       @default("pending") @map("sync_status")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  books        HadithBook[]
  hadiths      Hadith[]

  @@index([name])
  @@index([syncStatus])
  @@map("hadith_collections")
}

model HadithBook {
  id           Int              @id @default(autoincrement())
  collectionId Int              @map("collection_id")
  number       Int
  titleEn      String           @map("title_en")
  titleBn      String?          @map("title_bn")
  titleAr      String?          @map("title_ar")
  totalHadith  Int?             @map("total_hadith")
  source       String           @default("sunnah.com") @map("source")
  lastSyncedAt DateTime?        @map("last_synced_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  collection   HadithCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  hadiths      Hadith[]

  @@unique([collectionId, number])
  @@index([collectionId])
  @@map("hadith_books")
}

model Hadith {
  id            Int              @id @default(autoincrement())
  collectionId  Int              @map("collection_id")
  bookId        Int?             @map("book_id")
  hadithNumber  String           @map("hadith_number")
  textAr        String           @map("text_ar")
  textEn        String           @map("text_en")
  textBn        String?          @map("text_bn")
  grades        Json?
  refs          Json?
  narrator      String?
  isVerifiedBn  Boolean          @default(false) @map("is_verified_bn")
  source        String           @default("sunnah.com") @map("source")
  lastUpdatedAt DateTime         @default(now()) @map("last_updated_at")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  book          HadithBook?      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  collection    HadithCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, hadithNumber])
  @@index([collectionId])
  @@index([bookId])
  @@index([hadithNumber])
  @@map("hadith_items")
}

model TranslationJob {
  id             Int       @id @default(autoincrement())
  hadithId       Int       @map("hadith_id")
  text           String
  sourceLang     String    @default("en") @map("source_lang")
  targetLang     String    @default("bn") @map("target_lang")
  status         String    @default("pending")
  translatedText String?   @map("translated_text")
  error          String?
  retryCount     Int       @default(0) @map("retry_count")
  maxRetries     Int       @default(3) @map("max_retries")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  completedAt    DateTime? @map("completed_at")

  @@index([status])
  @@index([hadithId])
  @@index([createdAt])
  @@map("translation_jobs")
}

model AdminUser {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  passwordHash String          @map("password_hash")
  role         String          @default("admin")
  isActive     Boolean         @default(true) @map("is_active")
  lastLoginAt  DateTime?       @map("last_login_at")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  firstName    String?         @map("first_name")
  lastName     String?         @map("last_name")
  permissions  String[]        @default([])
  auditLogs    AdminAuditLog[]

  @@map("admin_users")
}

model AdminAuditLog {
  id         Int       @id @default(autoincrement())
  userId     Int       @map("user_id")
  action     String
  resource   String
  resourceId String?   @map("resource_id")
  details    Json?
  ipAddress  String?   @map("ip_address")
  userAgent  String?   @map("user_agent")
  createdAt  DateTime  @default(now()) @map("created_at")
  user       AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_audit_logs")
}

model ZakatCalculation {
  id              Int      @id @default(autoincrement())
  userId          String?  @map("user_id")
  gold            Decimal  @db.Decimal(10, 2)
  silver          Decimal  @db.Decimal(10, 2)
  cash            Decimal  @db.Decimal(10, 2)
  investments     Decimal  @db.Decimal(10, 2)
  other           Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  totalAssets     Decimal  @map("total_assets") @db.Decimal(10, 2)
  nisabThreshold  Decimal  @map("nisab_threshold") @db.Decimal(10, 2)
  zakatAmount     Decimal  @map("zakat_amount") @db.Decimal(10, 2)
  isZakatable     Boolean  @default(false) @map("is_zakatable")
  calculationDate DateTime @default(now()) @map("calculation_date")
  goldPrice       Decimal? @map("gold_price") @db.Decimal(10, 2)
  silverPrice     Decimal? @map("silver_price") @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([calculationDate])
  @@index([currency])
  @@map("zakat_calculations")
}
