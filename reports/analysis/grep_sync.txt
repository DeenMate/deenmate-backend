src/database/prisma.service.ts:10:  async onModuleInit() {
src/database/prisma.service.ts:14:  async onModuleDestroy() {
src/main.ts:7:async function bootstrap() {
src/main.ts:57:        description: "Admin API key for sync operations",
src/main.ts:69:    .addTag("Admin v4", "Administrative sync and management endpoints")
src/redis/redis.service.ts:9:  async onModuleInit() {
src/redis/redis.service.ts:21:  async onModuleDestroy() {
src/redis/redis.service.ts:27:  async get(key: string): Promise<string | null> {
src/redis/redis.service.ts:31:  async set(key: string, value: string, ttl?: number): Promise<"OK"> {
src/redis/redis.service.ts:38:  async del(key: string): Promise<number> {
src/redis/redis.service.ts:42:  async exists(key: string): Promise<number> {
src/redis/redis.service.ts:46:  async ping(): Promise<string> {
src/redis/redis.service.ts:51:  async invalidateByPrefix(prefix: string): Promise<number> {
src/redis/redis.service.ts:72:  async setex(key: string, ttl: number, value: string): Promise<"OK"> {
src/redis/redis.service.ts:76:  async incr(key: string): Promise<number> {
src/redis/redis.service.ts:80:  async sadd(key: string, ...members: string[]): Promise<number> {
src/redis/redis.service.ts:84:  async srem(key: string, ...members: string[]): Promise<number> {
src/redis/redis.service.ts:88:  async smembers(key: string): Promise<string[]> {
src/redis/redis.service.ts:92:  async keys(pattern: string): Promise<string[]> {
src/utils/audio-url-signer.service.ts:12:  async generateSignedUrl(
src/app.module.ts:13:import { SyncModule } from "./sync/sync.module";
src/app.module.ts:53:      name: 'sync-queue',
src/common/middleware/api-monitoring.middleware.ts:20:      // Log the request asynchronously to avoid blocking the response
src/common/middleware/api-monitoring.middleware.ts:21:      setImmediate(async () => {
src/common/middleware/rate-limiting.middleware.ts:11:  async use(req: Request, res: Response, next: NextFunction) {
src/common/middleware/ip-blocking.middleware.ts:11:  async use(req: Request, res: Response, next: NextFunction) {
src/common/utils/hash.util.ts:43: * Generate a unique identifier for sync jobs
src/common/utils/compat.util.ts:67:    "X-DeenMate-Source": "live-sync",
src/common/http/axios.module.ts:7:    HttpModule.registerAsync({
src/common/http/http.service.ts:161:  async get<T = any>(
src/common/http/http.service.ts:206:  async post<T = any>(
src/workers/worker.module.ts:3:import { SyncJobsProcessor } from './sync-jobs.processor';
src/workers/worker.service.ts:8:  action: "sync" | "update" | "cleanup" | "prewarm";
src/workers/worker.service.ts:22:  private syncQueue: Queue;
src/workers/worker.service.ts:29:  private async initializeQueues() {
src/workers/worker.service.ts:31:      // Initialize sync queue
src/workers/worker.service.ts:32:      this.syncQueue = new Queue("sync-queue", {
src/workers/worker.service.ts:53:  async addSyncJob(job: SyncJob): Promise<Job> {
src/workers/worker.service.ts:55:      const addedJob = await this.syncQueue.add(job.type, job, {
src/workers/worker.service.ts:70:        `Failed to add sync job: ${job.type}:${job.action}`,
src/workers/worker.service.ts:77:  async addCacheWarmJob(job: CacheWarmJob): Promise<Job> {
src/workers/worker.service.ts:93:  async getQueueStats(): Promise<any> {
src/workers/worker.service.ts:95:      const [syncStats, cacheStats] = await Promise.all([
src/workers/worker.service.ts:96:        this.syncQueue.getJobCounts(),
src/workers/worker.service.ts:101:        syncQueue: syncStats,
src/workers/worker.service.ts:111:  async clearQueue(queueName: "sync" | "cache"): Promise<boolean> {
src/workers/worker.service.ts:113:      const queue = queueName === "sync" ? this.syncQueue : this.cacheQueue;
src/workers/worker.service.ts:124:  async retryFailedJobs(queueName: "sync" | "cache"): Promise<number> {
src/workers/worker.service.ts:126:      const queue = queueName === "sync" ? this.syncQueue : this.cacheQueue;
src/workers/worker.service.ts:148:  async scheduleRecurringJobs(): Promise<void> {
src/workers/worker.service.ts:150:      // Schedule daily Quran sync at 2 AM
src/workers/worker.service.ts:151:      await this.syncQueue.add(
src/workers/worker.service.ts:153:        { type: "quran", action: "sync", priority: 1 },
src/workers/worker.service.ts:182:  async pauseJob(jobId: string): Promise<boolean> {
src/workers/worker.service.ts:184:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:186:        this.logger.warn(`Job ${jobId} not found in sync queue`);
src/workers/worker.service.ts:200:  async resumeJob(jobId: string): Promise<boolean> {
src/workers/worker.service.ts:202:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:204:        this.logger.warn(`Job ${jobId} not found in sync queue`);
src/workers/worker.service.ts:218:  async cancelJob(jobId: string): Promise<boolean> {
src/workers/worker.service.ts:220:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:222:        this.logger.warn(`Job ${jobId} not found in sync queue`);
src/workers/worker.service.ts:235:  async deleteJob(jobId: string): Promise<boolean> {
src/workers/worker.service.ts:237:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:239:        this.logger.warn(`Job ${jobId} not found in sync queue`);
src/workers/worker.service.ts:252:  async updateJobPriority(jobId: string, priority: number): Promise<boolean> {
src/workers/worker.service.ts:254:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:256:        this.logger.warn(`Job ${jobId} not found in sync queue`);
src/workers/worker.service.ts:270:  async getJobStatus(jobId: string): Promise<any> {
src/workers/worker.service.ts:272:      const job = await this.syncQueue.getJob(jobId);
src/workers/worker.service.ts:295:  async getJobProgress(jobId: string): Promise<number> {
src/workers/worker.service.ts:297:      const job = await this.syncQueue.getJob(jobId);
src/workers/sync-jobs.processor.ts:7:import { QuranSyncService } from '../modules/quran/quran.sync.service';
src/workers/sync-jobs.processor.ts:8:import { PrayerSyncService } from '../modules/prayer/prayer.sync.service';
src/workers/sync-jobs.processor.ts:10:import { AudioSyncService } from '../modules/audio/audio.sync.service';
src/workers/sync-jobs.processor.ts:15:@Processor('sync-queue')
src/workers/sync-jobs.processor.ts:33:  async process(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:121:  private async processHadithJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:125:      case 'sync':
src/workers/sync-jobs.processor.ts:127:          return await this.syncHadithCollectionFromLocal(job, data.collectionName);
src/workers/sync-jobs.processor.ts:129:          return await this.syncAllHadithCollections(job);
src/workers/sync-jobs.processor.ts:138:  private async syncAllHadithCollections(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:139:    this.logger.log('Starting sync for all hadith collections (using local database)');
src/workers/sync-jobs.processor.ts:162:          const result = await this.syncHadithCollectionFromLocal(job, collection.name);
src/workers/sync-jobs.processor.ts:165:          this.logger.error(`Failed to sync collection ${collection.name}:`, error);
src/workers/sync-jobs.processor.ts:171:      this.logger.log('All hadith collections sync completed using local data');
src/workers/sync-jobs.processor.ts:180:      this.logger.error('Failed to sync all hadith collections:', error);
src/workers/sync-jobs.processor.ts:185:  private async syncHadithCollection(job: Job<SyncJob>, collectionName: string): Promise<any> {
src/workers/sync-jobs.processor.ts:186:    this.logger.log(`Starting sync for collection: ${collectionName}`);
src/workers/sync-jobs.processor.ts:192:        data: { syncStatus: 'in_progress' },
src/workers/sync-jobs.processor.ts:209:          syncStatus: 'in_progress',
src/workers/sync-jobs.processor.ts:217:          syncStatus: 'in_progress',
src/workers/sync-jobs.processor.ts:228:          booksProcessed = await this.syncBooks(collection.id, collectionName, books);
src/workers/sync-jobs.processor.ts:239:        hadithsProcessed = await this.syncHadithsInBatches(job, collection.id, collectionName);
src/workers/sync-jobs.processor.ts:250:          syncStatus: 'ok',
src/workers/sync-jobs.processor.ts:257:      this.logger.log(`Collection ${collectionName} synced successfully`);
src/workers/sync-jobs.processor.ts:267:      this.logger.error(`Failed to sync collection ${collectionName}:`, error);
src/workers/sync-jobs.processor.ts:269:      // Update sync status to failed
src/workers/sync-jobs.processor.ts:272:        data: { syncStatus: 'failed' },
src/workers/sync-jobs.processor.ts:279:  private async syncHadithCollectionFromLocal(job: Job<SyncJob>, collectionName: string): Promise<any> {
src/workers/sync-jobs.processor.ts:280:    this.logger.log(`Starting local sync for collection: ${collectionName}`);
src/workers/sync-jobs.processor.ts:292:      // Update collection last synced timestamp
src/workers/sync-jobs.processor.ts:297:          syncStatus: 'completed'
src/workers/sync-jobs.processor.ts:318:        note: 'Local database sync completed (no external API calls)'
src/workers/sync-jobs.processor.ts:321:      this.logger.error(`Failed to sync collection ${collectionName} from local data:`, error);
src/workers/sync-jobs.processor.ts:326:  private async syncBooks(collectionId: number, collectionName: string, sunnahBooks: any[]): Promise<number> {
src/workers/sync-jobs.processor.ts:372:  private async syncHadithsInBatches(job: Job<SyncJob>, collectionId: number, collectionName: string): Promise<number> {
src/workers/sync-jobs.processor.ts:373:    this.logger.log(`Starting hadith sync for collection ${collectionName}`);
src/workers/sync-jobs.processor.ts:420:    this.logger.log(`Completed hadith sync for collection ${collectionName}. Total: ${totalHadiths} hadiths`);
src/workers/sync-jobs.processor.ts:424:  private async processHadithBatch(collectionId: number, collectionName: string, hadiths: any[]): Promise<void> {
src/workers/sync-jobs.processor.ts:436:  private async processSingleHadith(collectionId: number, collectionName: string, sunnahHadith: any): Promise<void> {
src/workers/sync-jobs.processor.ts:498:  private async processQuranJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:501:    this.logger.log('Starting Quran sync job processing');
src/workers/sync-jobs.processor.ts:507:      const chaptersResult = await this.quranSyncService.syncChapters({ force: data?.force || false });
src/workers/sync-jobs.processor.ts:508:      this.logger.log(`Quran chapters sync result: ${JSON.stringify(chaptersResult)}`);
src/workers/sync-jobs.processor.ts:513:      const versesResult = await this.quranSyncService.syncVerses({ force: data?.force || false });
src/workers/sync-jobs.processor.ts:514:      this.logger.log(`Quran verses sync result: ${JSON.stringify(versesResult)}`);
src/workers/sync-jobs.processor.ts:519:      const translationsResult = await this.quranSyncService.syncTranslationResources({ force: data?.force || false });
src/workers/sync-jobs.processor.ts:520:      this.logger.log(`Quran translations sync result: ${JSON.stringify(translationsResult)}`);
src/workers/sync-jobs.processor.ts:525:      const verseTranslationsResult = await this.quranSyncService.syncVerseTranslations({ force: data?.force || false });
src/workers/sync-jobs.processor.ts:526:      this.logger.log(`Quran verse translations sync result: ${JSON.stringify(verseTranslationsResult)}`);
src/workers/sync-jobs.processor.ts:530:      this.logger.log('Quran sync job completed successfully');
src/workers/sync-jobs.processor.ts:538:        message: 'Quran sync completed successfully'
src/workers/sync-jobs.processor.ts:541:      this.logger.error(`Quran sync job failed: ${error.message}`);
src/workers/sync-jobs.processor.ts:546:  private async processPrayerJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:549:    this.logger.log(`Starting Prayer sync job processing with action: ${action}`);
src/workers/sync-jobs.processor.ts:566:      // Default sync action
src/workers/sync-jobs.processor.ts:570:      this.logger.log('Checking prayer sync prerequisites...');
src/workers/sync-jobs.processor.ts:574:        throw new Error(`Prayer sync prerequisites failed: ${prerequisiteResult.message}`);
src/workers/sync-jobs.processor.ts:586:      const methodsResult = await this.prayerSyncService.syncCalculationMethods({ force: data?.force || false });
src/workers/sync-jobs.processor.ts:587:      this.logger.log(`Prayer methods sync result: ${JSON.stringify(methodsResult)}`);
src/workers/sync-jobs.processor.ts:591:      // First, ensure we have prayer locations by syncing comprehensive city list
src/workers/sync-jobs.processor.ts:592:      this.logger.log('Ensuring prayer locations exist by syncing comprehensive city list...');
src/workers/sync-jobs.processor.ts:675:          await this.prayerSyncService.syncPrayerTimes(
src/workers/sync-jobs.processor.ts:686:          this.logger.log(`Location synced: ${city.name}`);
src/workers/sync-jobs.processor.ts:688:          this.logger.warn(`Failed to sync location ${city.name}: ${error.message}`);
src/workers/sync-jobs.processor.ts:699:      this.logger.log(`Found ${locations.length} prayer locations to sync times for`);
src/workers/sync-jobs.processor.ts:723:              const result = await this.prayerSyncService.syncPrayerTimes(
src/workers/sync-jobs.processor.ts:740:              this.logger.error(`Failed to sync prayer times for ${location.city || 'Unknown'} (${method.methodCode}, madhab: ${madhab}): ${error.message}`);
src/workers/sync-jobs.processor.ts:756:      this.logger.log('Prayer sync job completed successfully');
src/workers/sync-jobs.processor.ts:762:        message: 'Prayer sync completed successfully'
src/workers/sync-jobs.processor.ts:765:      this.logger.error(`Prayer sync job failed: ${error.message}`);
src/workers/sync-jobs.processor.ts:770:  private async processAudioJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:773:    this.logger.log('Starting Audio sync job processing');
src/workers/sync-jobs.processor.ts:779:      const recitersResult = await this.audioSyncService.syncReciters();
src/workers/sync-jobs.processor.ts:780:      this.logger.log(`Audio reciters sync result: ${JSON.stringify(recitersResult)}`);
src/workers/sync-jobs.processor.ts:785:      const audioFilesResult = await this.audioSyncService.syncAllAudioFiles();
src/workers/sync-jobs.processor.ts:786:      this.logger.log(`Audio files sync result: ${JSON.stringify(audioFilesResult)}`);
src/workers/sync-jobs.processor.ts:790:      this.logger.log('Audio sync job completed successfully');
src/workers/sync-jobs.processor.ts:796:        message: 'Audio sync completed successfully'
src/workers/sync-jobs.processor.ts:799:      this.logger.error(`Audio sync job failed: ${error.message}`);
src/workers/sync-jobs.processor.ts:804:  private async processZakatJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:807:    this.logger.log('Starting Zakat sync job processing (Gold price update)');
src/workers/sync-jobs.processor.ts:814:      this.logger.log(`Gold price sync result: ${JSON.stringify(goldPriceResult)}`);
src/workers/sync-jobs.processor.ts:818:      this.logger.log('Zakat sync job completed successfully');
src/workers/sync-jobs.processor.ts:823:        message: 'Zakat sync (gold prices) completed successfully'
src/workers/sync-jobs.processor.ts:826:      this.logger.error(`Zakat sync job failed: ${error.message}`);
src/workers/sync-jobs.processor.ts:831:  private async processFinanceJob(job: Job<SyncJob>): Promise<any> {
src/workers/sync-jobs.processor.ts:834:    this.logger.log('Starting Finance sync job processing (Gold price update)');
src/workers/sync-jobs.processor.ts:841:      this.logger.log(`Gold price sync result: ${JSON.stringify(goldPriceResult)}`);
src/workers/sync-jobs.processor.ts:845:      this.logger.log('Finance sync job completed successfully');
src/workers/sync-jobs.processor.ts:850:        message: 'Finance sync (gold prices) completed successfully'
src/workers/sync-jobs.processor.ts:853:      this.logger.error(`Finance sync job failed: ${error.message}`);
src/workers/sync-jobs.processor.ts:858:  private async updateHadithCollection(job: Job<SyncJob>, data: any): Promise<any> {
src/app.controller.ts:30:      async () => {
src/sync/sync.cron.service.ts:4:import { QuranSyncService } from "../modules/quran/quran.sync.service";
src/sync/sync.cron.service.ts:5:import { PrayerSyncService } from "../modules/prayer/prayer.sync.service";
src/sync/sync.cron.service.ts:22:  async handleDailyQuranSync() {
src/sync/sync.cron.service.ts:24:      this.logger.log("Daily Quran sync is disabled");
src/sync/sync.cron.service.ts:28:    this.logger.log("Starting daily Quran sync...");
src/sync/sync.cron.service.ts:32:      const chaptersResult = await this.quranSyncService.syncChapters();
src/sync/sync.cron.service.ts:34:        `Quran chapters sync result: ${JSON.stringify(chaptersResult)}`,
src/sync/sync.cron.service.ts:38:      const versesResult = await this.quranSyncService.syncVerses();
src/sync/sync.cron.service.ts:40:        `Quran verses sync result: ${JSON.stringify(versesResult)}`,
src/sync/sync.cron.service.ts:45:        await this.quranSyncService.syncTranslationResources();
src/sync/sync.cron.service.ts:47:        `Quran translations sync result: ${JSON.stringify(translationsResult)}`,
src/sync/sync.cron.service.ts:50:      this.logger.log("Daily Quran sync completed successfully");
src/sync/sync.cron.service.ts:52:      this.logger.error(`Daily Quran sync failed: ${error.message}`);
src/sync/sync.cron.service.ts:57:  async handleDailyPrayerSync() {
src/sync/sync.cron.service.ts:59:      this.logger.log("Daily prayer sync is disabled");
src/sync/sync.cron.service.ts:63:    this.logger.log("Starting daily prayer sync...");
src/sync/sync.cron.service.ts:68:        await this.prayerSyncService.syncCalculationMethods();
src/sync/sync.cron.service.ts:70:        `Prayer methods sync result: ${JSON.stringify(methodsResult)}`,
src/sync/sync.cron.service.ts:74:      await this.syncMajorCitiesPrayerTimes();
src/sync/sync.cron.service.ts:76:      this.logger.log("Daily prayer sync completed successfully");
src/sync/sync.cron.service.ts:78:      this.logger.error(`Daily prayer sync failed: ${error.message}`);
src/sync/sync.cron.service.ts:83:  async handlePrayerTimesPreWarm() {
src/sync/sync.cron.service.ts:93:      await this.syncMajorCitiesPrayerTimes();
src/sync/sync.cron.service.ts:103:  async handlePrayerTimesPreWarmMidnight() {
src/sync/sync.cron.service.ts:111:      await this.syncMajorCitiesPrayerTimes();
src/sync/sync.cron.service.ts:122:  private async syncMajorCitiesPrayerTimes() {
src/sync/sync.cron.service.ts:143:        const result = await this.prayerSyncService.syncPrayerTimes(
src/sync/sync.cron.service.ts:150:          `Prayer times sync for ${city.name}: ${JSON.stringify(result)}`,
src/sync/sync.cron.service.ts:157:          `Failed to sync prayer times for ${city.name}: ${error.message}`,
src/sync/sync.cron.service.ts:163:  private async delay(ms: number): Promise<void> {
src/sync/sync.cron.service.ts:167:  // Manual sync methods for admin use
src/sync/sync.cron.service.ts:168:  async manualQuranSync(force = false) {
src/sync/sync.cron.service.ts:169:    this.logger.log(`Starting manual Quran sync (force: ${force})...`);
src/sync/sync.cron.service.ts:172:      const chaptersResult = await this.quranSyncService.syncChapters({
src/sync/sync.cron.service.ts:175:      const versesResult = await this.quranSyncService.syncVerses({ force });
src/sync/sync.cron.service.ts:177:        await this.quranSyncService.syncTranslationResources({ force });
src/sync/sync.cron.service.ts:185:      this.logger.error(`Manual Quran sync failed: ${error.message}`);
src/sync/sync.cron.service.ts:190:  async manualPrayerSync(force = false) {
src/sync/sync.cron.service.ts:191:    this.logger.log(`Starting manual prayer sync (force: ${force})...`);
src/sync/sync.cron.service.ts:194:      const methodsResult = await this.prayerSyncService.syncCalculationMethods(
src/sync/sync.cron.service.ts:208:          const result = await this.prayerSyncService.syncPrayerTimes(
src/sync/sync.cron.service.ts:224:      this.logger.error(`Manual prayer sync failed: ${error.message}`);
src/sync/sync.module.ts:10:import { SyncCronService } from "./sync.cron.service";
src/sync/sync.module.ts:11:import { SyncController } from "./sync.controller";
src/sync/sync.controller.ts:12:import { SyncCronService } from "./sync.cron.service";
src/sync/sync.controller.ts:13:import { QuranSyncService } from "../modules/quran/quran.sync.service";
src/sync/sync.controller.ts:14:import { PrayerSyncService } from "../modules/prayer/prayer.sync.service";
src/sync/sync.controller.ts:15:import { AudioSyncService } from "../modules/audio/audio.sync.service";
src/sync/sync.controller.ts:20:@Controller({ path: "sync", version: "4" })
src/sync/sync.controller.ts:24:    private readonly syncCronService: SyncCronService,
src/sync/sync.controller.ts:32:  async syncQuran(
src/sync/sync.controller.ts:42:        const chaptersResult = await this.quranSyncService.syncChapters({
src/sync/sync.controller.ts:45:        const versesResult = await this.quranSyncService.syncVerses({
src/sync/sync.controller.ts:49:          await this.quranSyncService.syncTranslationResources({
src/sync/sync.controller.ts:55:          message: "Quran sync dry run completed",
src/sync/sync.controller.ts:64:      const result = await this.syncCronService.manualQuranSync(forceSync);
src/sync/sync.controller.ts:68:        message: "Quran sync completed successfully",
src/sync/sync.controller.ts:74:        message: "Quran sync failed",
src/sync/sync.controller.ts:81:  async syncPrayer(
src/sync/sync.controller.ts:92:          await this.prayerSyncService.syncCalculationMethods({ dryRun: true });
src/sync/sync.controller.ts:95:        const prayerTimesResult = await this.prayerSyncService.syncPrayerTimes(
src/sync/sync.controller.ts:103:          message: "Prayer sync dry run completed",
src/sync/sync.controller.ts:111:      const result = await this.syncCronService.manualPrayerSync(forceSync);
src/sync/sync.controller.ts:115:        message: "Prayer sync completed successfully",
src/sync/sync.controller.ts:121:        message: "Prayer sync failed",
src/sync/sync.controller.ts:128:  async syncAll(
src/sync/sync.controller.ts:139:          await this.syncCronService.manualQuranSync(forceSync);
src/sync/sync.controller.ts:141:          await this.syncCronService.manualPrayerSync(forceSync);
src/sync/sync.controller.ts:145:          message: "Full sync dry run completed",
src/sync/sync.controller.ts:153:      // Run all syncs in parallel
src/sync/sync.controller.ts:155:        this.syncCronService.manualQuranSync(forceSync),
src/sync/sync.controller.ts:156:        this.syncCronService.manualPrayerSync(forceSync),
src/sync/sync.controller.ts:157:        this.audioSyncService.syncAllAudioFiles(),
src/sync/sync.controller.ts:162:        message: "Full sync completed successfully",
src/sync/sync.controller.ts:172:        message: "Full sync failed",
src/sync/sync.controller.ts:179:  async getSyncStatus(@Res() res: Response) {
src/sync/sync.controller.ts:181:      // Get recent sync job logs
src/sync/sync.controller.ts:192:          syncEnabled: true,
src/sync/sync.controller.ts:198:        message: "Failed to get sync status",
src/sync/sync.controller.ts:205:  async syncQuranChapters(
src/sync/sync.controller.ts:214:      const result = await this.quranSyncService.syncChapters({
src/sync/sync.controller.ts:221:        message: "Quran chapters sync completed",
src/sync/sync.controller.ts:227:        message: "Quran chapters sync failed",
src/sync/sync.controller.ts:234:  async syncQuranVerses(
src/sync/sync.controller.ts:243:      const result = await this.quranSyncService.syncVerses({
src/sync/sync.controller.ts:250:        message: "Quran verses sync completed",
src/sync/sync.controller.ts:256:        message: "Quran verses sync failed",
src/sync/sync.controller.ts:263:  async syncPrayerMethods(
src/sync/sync.controller.ts:272:      const result = await this.prayerSyncService.syncCalculationMethods({
src/sync/sync.controller.ts:279:        message: "Prayer methods sync completed",
src/sync/sync.controller.ts:285:        message: "Prayer methods sync failed",
src/sync/sync.controller.ts:292:  async syncPrayerTimes(
src/sync/sync.controller.ts:319:      const result = await this.prayerSyncService.syncPrayerTimes(
src/sync/sync.controller.ts:327:        message: "Prayer times sync completed",
src/sync/sync.controller.ts:333:        message: "Prayer times sync failed",
src/sync/sync.controller.ts:340:  async syncAudioReciters(@Res() res: Response) {
src/sync/sync.controller.ts:342:      const result = await this.audioSyncService.syncReciters();
src/sync/sync.controller.ts:346:        message: "Audio reciters sync completed",
src/sync/sync.controller.ts:352:        message: "Audio reciters sync failed",
src/sync/sync.controller.ts:359:  async syncAudioFiles(
src/sync/sync.controller.ts:368:        result = await this.audioSyncService.syncAudioFilesForChapter(
src/sync/sync.controller.ts:373:        result = await this.audioSyncService.syncAllAudioFiles();
src/sync/sync.controller.ts:378:        message: "Audio files sync completed",
src/sync/sync.controller.ts:384:        message: "Audio files sync failed",
src/sync/sync.controller.ts:391:  async seedAudioData(@Res() res: Response) {
src/sync/sync.controller.spec.ts:3:import { SyncController } from "./sync.controller";
src/sync/sync.controller.spec.ts:4:import { SyncCronService } from "./sync.cron.service";
src/sync/sync.controller.spec.ts:5:import { QuranSyncService } from "../modules/quran/quran.sync.service";
src/sync/sync.controller.spec.ts:6:import { PrayerSyncService } from "../modules/prayer/prayer.sync.service";
src/sync/sync.controller.spec.ts:7:import { AudioSyncService } from "../modules/audio/audio.sync.service";
src/sync/sync.controller.spec.ts:24:    syncChapters: jest.fn(),
src/sync/sync.controller.spec.ts:25:    syncVerses: jest.fn(),
src/sync/sync.controller.spec.ts:26:    syncTranslationResources: jest.fn(),
src/sync/sync.controller.spec.ts:30:    syncCalculationMethods: jest.fn(),
src/sync/sync.controller.spec.ts:31:    syncPrayerTimes: jest.fn(),
src/sync/sync.controller.spec.ts:35:    syncReciters: jest.fn(),
src/sync/sync.controller.spec.ts:36:    syncAudioFiles: jest.fn(),
src/sync/sync.controller.spec.ts:44:  beforeEach(async () => {
src/sync/sync.controller.spec.ts:83:  describe("syncQuran", () => {
src/sync/sync.controller.spec.ts:84:    it("should trigger Quran sync", async () => {
src/sync/sync.controller.spec.ts:91:      mockQuranSyncService.syncChapters.mockResolvedValue(mockResult.chapters);
src/sync/sync.controller.spec.ts:92:      mockQuranSyncService.syncVerses.mockResolvedValue(mockResult.verses);
src/sync/sync.controller.spec.ts:93:      mockQuranSyncService.syncTranslationResources.mockResolvedValue(
src/sync/sync.controller.spec.ts:102:      const result = await controller.syncQuran(
src/sync/sync.controller.spec.ts:109:      expect(quranSyncService.syncChapters).toHaveBeenCalledWith({ dryRun: true });
src/sync/sync.controller.spec.ts:110:      expect(quranSyncService.syncVerses).toHaveBeenCalledWith({ dryRun: true });
src/sync/sync.controller.spec.ts:111:      expect(quranSyncService.syncTranslationResources).toHaveBeenCalledWith({ dryRun: true });
src/sync/sync.controller.spec.ts:115:  describe("syncPrayer", () => {
src/sync/sync.controller.spec.ts:116:    it("should trigger Prayer sync", async () => {
src/sync/sync.controller.spec.ts:122:      mockPrayerSyncService.syncCalculationMethods.mockResolvedValue(
src/sync/sync.controller.spec.ts:125:      mockPrayerSyncService.syncPrayerTimes.mockResolvedValue(mockResult.times);
src/sync/sync.controller.spec.ts:132:      const result = await controller.syncPrayer(
src/sync/sync.controller.spec.ts:139:      expect(prayerSyncService.syncCalculationMethods).toHaveBeenCalledWith({ dryRun: true });
src/sync/sync.controller.spec.ts:140:      expect(prayerSyncService.syncPrayerTimes).toHaveBeenCalledWith(21.4225, 39.8262, { dryRun: true });
src/sync/sync.controller.spec.ts:145:    it("should return sync status", async () => {
src/sync/sync.controller.spec.ts:157:  describe("syncAll", () => {
src/sync/sync.controller.spec.ts:158:    it("should trigger all sync operations", async () => {
src/sync/sync.controller.spec.ts:166:      mockQuranSyncService.syncChapters.mockResolvedValue({
src/sync/sync.controller.spec.ts:170:      mockQuranSyncService.syncVerses.mockResolvedValue({
src/sync/sync.controller.spec.ts:174:      mockQuranSyncService.syncTranslationResources.mockResolvedValue({
src/sync/sync.controller.spec.ts:178:      mockPrayerSyncService.syncCalculationMethods.mockResolvedValue({
src/sync/sync.controller.spec.ts:182:      mockPrayerSyncService.syncPrayerTimes.mockResolvedValue({
src/sync/sync.controller.spec.ts:186:      mockAudioSyncService.syncReciters.mockResolvedValue({
src/sync/sync.controller.spec.ts:190:      mockAudioSyncService.syncAudioFiles.mockResolvedValue({
src/sync/sync.controller.spec.ts:200:      const result = await controller.syncAll(mockRes as any, "false", "false");
src/modules/prayer/prayer.sync.service.ts:13:  location?: string; // Specific location to sync
src/modules/prayer/prayer.sync.service.ts:52:  private async sleep(ms: number) {
src/modules/prayer/prayer.sync.service.ts:59:  async convertGregorianToHijri(gregorianDate: string): Promise<{ hijri: string; gregorian: string } | null> {
src/modules/prayer/prayer.sync.service.ts:80:  async convertHijriToGregorian(hijriDate: string): Promise<{ hijri: string; gregorian: string } | null> {
src/modules/prayer/prayer.sync.service.ts:101:  async getCurrentTime(timezone: string): Promise<{ time: string; timezone: string } | null> {
src/modules/prayer/prayer.sync.service.ts:122:  async getAsmaAlHusna(): Promise<Array<{ number: number; name: string; transliteration: string; meaning: string }> | null> {
src/modules/prayer/prayer.sync.service.ts:142:  private async savePrayerTimesWithRetry(
src/modules/prayer/prayer.sync.service.ts:218:  async syncCalculationMethods(
src/modules/prayer/prayer.sync.service.ts:224:    this.logger.log(`Starting prayer calculation methods sync (Job: ${jobId})`);
src/modules/prayer/prayer.sync.service.ts:227:      this.logger.log("Prayer calculation methods sync is disabled");
src/modules/prayer/prayer.sync.service.ts:245:            "Skipping calculation methods sync - recent sync detected",
src/modules/prayer/prayer.sync.service.ts:331:          const errorMsg = `Failed to sync calculation method: ${error instanceof Error ? error.message : String(error)}`;
src/modules/prayer/prayer.sync.service.ts:364:        `Prayer calculation methods sync completed: ${JSON.stringify(result)}`,
src/modules/prayer/prayer.sync.service.ts:368:      const errorMsg = `Prayer calculation methods sync failed: ${error.message}`;
src/modules/prayer/prayer.sync.service.ts:394:  async syncPrayerTimesForMethod(
src/modules/prayer/prayer.sync.service.ts:405:      `[syncPrayerTimesForMethod] Starting prayer times sync for ${latitude},${longitude} method=${methodId} school=${school} (Job: ${jobId})`,
src/modules/prayer/prayer.sync.service.ts:407:    this.logger.log(`[syncPrayerTimesForMethod] Options: ${JSON.stringify(options)}`);
src/modules/prayer/prayer.sync.service.ts:417:          this.logger.log("Skipping prayer times sync - recent sync detected");
src/modules/prayer/prayer.sync.service.ts:434:      this.logger.log(`syncPrayerTimes: Date range: ${dateRange.start.toISOString().split('T')[0]} to ${dateRange.end.toISOString().split('T')[0]} (${options.dateRange ? 'custom' : 'default'})`);
src/modules/prayer/prayer.sync.service.ts:552:          this.logger.error(`Failed to sync prayer times for ${d.toISOString().split('T')[0]}:`, error);
src/modules/prayer/prayer.sync.service.ts:576:      this.logger.error(`Prayer times sync failed: ${error.message}`, error.stack);
src/modules/prayer/prayer.sync.service.ts:605:  async syncPrayerTimesCalendar(
src/modules/prayer/prayer.sync.service.ts:618:      `[syncPrayerTimesCalendar] Starting calendar sync for ${latitude},${longitude} method=${methodId} school=${school} year=${year} month=${month} (Job: ${jobId})`,
src/modules/prayer/prayer.sync.service.ts:629:          this.logger.log("Skipping calendar sync - recent sync detected");
src/modules/prayer/prayer.sync.service.ts:702:      this.logger.log(`Calendar sync URL: ${url}`);
src/modules/prayer/prayer.sync.service.ts:779:        `Calendar sync completed: ${totalProcessed} days processed, ${totalInserted} inserted, ${totalUpdated} updated, ${totalFailed} failed`,
src/modules/prayer/prayer.sync.service.ts:793:      this.logger.error(`Calendar sync failed: ${error.message}`, error.stack);
src/modules/prayer/prayer.sync.service.ts:822:  async syncPrayerTimesHijriCalendar(
src/modules/prayer/prayer.sync.service.ts:835:      `[syncPrayerTimesHijriCalendar] Starting Hijri calendar sync for ${latitude},${longitude} method=${methodId} school=${school} hijriYear=${hijriYear} hijriMonth=${hijriMonth} (Job: ${jobId})`,
src/modules/prayer/prayer.sync.service.ts:846:          this.logger.log("Skipping Hijri calendar sync - recent sync detected");
src/modules/prayer/prayer.sync.service.ts:919:      this.logger.log(`Hijri calendar sync URL: ${url}`);
src/modules/prayer/prayer.sync.service.ts:996:        `Hijri calendar sync completed: ${totalProcessed} days processed, ${totalInserted} inserted, ${totalUpdated} updated, ${totalFailed} failed`,
src/modules/prayer/prayer.sync.service.ts:1010:      this.logger.error(`Hijri calendar sync failed: ${error.message}`, error.stack);
src/modules/prayer/prayer.sync.service.ts:1035:  async syncPrayerTimes(
src/modules/prayer/prayer.sync.service.ts:1044:      `[syncPrayerTimes] Starting prayer times sync for ${latitude},${longitude} (Job: ${jobId})`,
src/modules/prayer/prayer.sync.service.ts:1046:    this.logger.log(`[syncPrayerTimes] Options: ${JSON.stringify(options)}`);
src/modules/prayer/prayer.sync.service.ts:1049:      this.logger.log("Prayer times sync is disabled");
src/modules/prayer/prayer.sync.service.ts:1070:          this.logger.log("Skipping prayer times sync - recent sync detected");
src/modules/prayer/prayer.sync.service.ts:1094:          await this.syncCalculationMethods({ force: true });
src/modules/prayer/prayer.sync.service.ts:1107:      this.logger.log(`syncPrayerTimes: Date range: ${dateRange.start.toISOString().split('T')[0]} to ${dateRange.end.toISOString().split('T')[0]} (${options.dateRange ? 'custom' : 'default'})`);
src/modules/prayer/prayer.sync.service.ts:1125:          console.log(`Prayer sync: Requesting date ${dateStr} for ${latitude},${longitude}`);
src/modules/prayer/prayer.sync.service.ts:1225:              const errorMsg = `Failed to sync prayer times for ${dateStr}: ${timeError.message}`;
src/modules/prayer/prayer.sync.service.ts:1265:      this.logger.log(`Prayer times sync completed: ${JSON.stringify(result)}`);
src/modules/prayer/prayer.sync.service.ts:1268:      const errorMsg = `Prayer times sync failed: ${error.message}`;
src/modules/prayer/prayer.sync.service.ts:1294:  async prewarmAllLocations(days: number = 7): Promise<PrayerSyncResult> {
src/modules/prayer/prayer.sync.service.ts:1340:            // Try city-based sync first if city/country available
src/modules/prayer/prayer.sync.service.ts:1343:              res = await this.syncPrayerTimesForMethodByCity(loc.city, loc.country, method.id, school, {
src/modules/prayer/prayer.sync.service.ts:1350:              res = await this.syncPrayerTimesForMethod(loc.lat, loc.lng, method.id, school, {
src/modules/prayer/prayer.sync.service.ts:1382:  async syncPrayerTimesForMethodByCity(
src/modules/prayer/prayer.sync.service.ts:1393:      `Starting prayer times sync for ${city}, ${country} method=${methodId} school=${school} (Job: ${jobId})`,
src/modules/prayer/prayer.sync.service.ts:1412:      this.logger.log(`syncPrayerTimes: Date range: ${dateRange.start.toISOString().split('T')[0]} to ${dateRange.end.toISOString().split('T')[0]} (${options.dateRange ? 'custom' : 'default'})`);
src/modules/prayer/prayer.sync.service.ts:1523:          this.logger.error(`Failed to sync prayer times for ${d.toISOString().split('T')[0]}:`, error);
src/modules/prayer/prayer.sync.service.ts:1547:      const errorMsg = `Prayer times sync failed for ${city}, ${country}: ${error.message}`;
src/modules/prayer/prayer.sync.service.ts:1573:  private async upsertPrayerTimesRecord(mappedData: any): Promise<{ inserted: number; updated: number; failed: number }> {
src/modules/prayer/prayer.sync.service.ts:1622:  private async ensureLocationExists(
src/modules/prayer/prayer.sync.service.ts:1667:  private async getLastSyncTime(resource: string): Promise<Date | null> {
src/modules/prayer/prayer.sync.service.ts:1668:    const lastJob = await (this.prisma as any).syncJobLog.findFirst({
src/modules/prayer/prayer.sync.service.ts:1679:  private async getLastSyncTimeForLocation(
src/modules/prayer/prayer.sync.service.ts:1683:    const lastJob = await (this.prisma as any).syncJobLog.findFirst({
src/modules/prayer/prayer.sync.service.ts:1701:  private async logSyncJob(
src/modules/prayer/prayer.sync.service.ts:1715:      await (this.prisma as any).syncJobLog.create({
src/modules/prayer/prayer.sync.service.ts:1723:      this.logger.error(`Failed to log sync job: ${error.message}`);
src/modules/prayer/prayer.sync.service.ts:1727:  private async delay(ms: number): Promise<void> {
src/modules/prayer/prayer.service.ts:20:  async getCalculationMethods() {
src/modules/prayer/prayer.service.ts:70:  async getCalculationMethod(methodCode: string) {
src/modules/prayer/prayer.service.ts:110:  async getLocations() {
src/modules/prayer/prayer.service.ts:149:  async getLocation(locKey: string) {
src/modules/prayer/prayer.service.ts:186:  async saveLocation(location: {
src/modules/prayer/prayer.service.ts:216:  async getPrayerTimes(
src/modules/prayer/prayer.service.ts:281:  async savePrayerTimes(prayerTimes: {
src/modules/prayer/prayer.service.ts:345:  async getMonthlyPrayerTimes(
src/modules/prayer/prayer.service.ts:431:  async calculateQiblaDirection(lat: number, lng: number): Promise<number> {
src/modules/prayer/prayer.service.ts:456:  async getDailyPrayerTimes(
src/modules/prayer/prayer.service.ts:570:  private async fallbackToUpstream(endpoint: string, params: any) {
src/modules/prayer/prayer.service.ts:703:  async getPrayerTimesByCity(
src/modules/prayer/prayer.service.ts:743:  async getPrayerCalendar(
src/modules/prayer/prayer.service.ts:792:  private async mapExternalMethodToInternal(externalMethodId: number): Promise<number> {
src/modules/prayer/prayer-prerequisites.service.ts:3:import { PrayerSyncService } from './prayer.sync.service';
src/modules/prayer/prayer-prerequisites.service.ts:21:  async checkPrerequisites(): Promise<PrerequisiteCheckResult> {
src/modules/prayer/prayer-prerequisites.service.ts:58:        ? 'All prerequisites are met for prayer sync'
src/modules/prayer/prayer-prerequisites.service.ts:78:  async fixPrerequisites(): Promise<{
src/modules/prayer/prayer-prerequisites.service.ts:92:        const methodsResult = await this.prayerSyncService.syncCalculationMethods({
src/modules/prayer/prayer-prerequisites.service.ts:99:        this.logger.log('Prayer calculation methods synced successfully');
src/modules/prayer/prayer-prerequisites.service.ts:101:        this.logger.error('Failed to sync prayer calculation methods:', error);
src/modules/prayer/prayer-prerequisites.service.ts:109:      // Fix prayer locations by syncing major cities
src/modules/prayer/prayer-prerequisites.service.ts:130:            const result = await this.prayerSyncService.syncPrayerTimes(
src/modules/prayer/prayer-prerequisites.service.ts:146:            this.logger.warn(`Failed to sync location ${city.name}:`, error);
src/modules/prayer/prayer-prerequisites.service.ts:158:        this.logger.log('Prayer locations synced successfully');
src/modules/prayer/prayer-prerequisites.service.ts:160:        this.logger.error('Failed to sync prayer locations:', error);
src/modules/prayer/prayer-prerequisites.service.ts:184:  async validateAndFixPrerequisites(): Promise<{
src/modules/prayer/tests/admin.controller.spec.ts:10:  beforeEach(async () => {
src/modules/prayer/tests/admin.controller.spec.ts:17:            syncPrayerTimesForLocation: jest.fn(),
src/modules/prayer/tests/admin.controller.spec.ts:36:  describe('syncPrayerTimes', () => {
src/modules/prayer/tests/admin.controller.spec.ts:37:    it('should sync exactly 1 day when days=1', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:40:        message: 'Prayer times sync completed',
src/modules/prayer/tests/admin.controller.spec.ts:53:      (adminService.syncPrayerTimesForLocation as jest.Mock).mockResolvedValue(mockResult);
src/modules/prayer/tests/admin.controller.spec.ts:55:      const result = await controller.syncPrayerTimes(
src/modules/prayer/tests/admin.controller.spec.ts:66:      expect(adminService.syncPrayerTimesForLocation).toHaveBeenCalledWith(
src/modules/prayer/tests/admin.controller.spec.ts:76:    it('should sync exactly 7 days when days=7', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:79:        message: 'Prayer times sync completed',
src/modules/prayer/tests/admin.controller.spec.ts:92:      (adminService.syncPrayerTimesForLocation as jest.Mock).mockResolvedValue(mockResult);
src/modules/prayer/tests/admin.controller.spec.ts:94:      const result = await controller.syncPrayerTimes(
src/modules/prayer/tests/admin.controller.spec.ts:105:      expect(adminService.syncPrayerTimesForLocation).toHaveBeenCalledWith(
src/modules/prayer/tests/admin.controller.spec.ts:115:    it('should handle force=true parameter', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:118:        message: 'Prayer times sync completed',
src/modules/prayer/tests/admin.controller.spec.ts:131:      (adminService.syncPrayerTimesForLocation as jest.Mock).mockResolvedValue(mockResult);
src/modules/prayer/tests/admin.controller.spec.ts:133:      const result = await controller.syncPrayerTimes(
src/modules/prayer/tests/admin.controller.spec.ts:143:      expect(adminService.syncPrayerTimesForLocation).toHaveBeenCalledWith(
src/modules/prayer/tests/admin.controller.spec.ts:153:    it('should handle different school parameters', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:156:        message: 'Prayer times sync completed',
src/modules/prayer/tests/admin.controller.spec.ts:169:      (adminService.syncPrayerTimesForLocation as jest.Mock).mockResolvedValue(mockResult);
src/modules/prayer/tests/admin.controller.spec.ts:172:      const result = await controller.syncPrayerTimes(
src/modules/prayer/tests/admin.controller.spec.ts:182:      expect(adminService.syncPrayerTimesForLocation).toHaveBeenCalledWith(
src/modules/prayer/tests/admin.controller.spec.ts:192:    it('should handle sync failures gracefully', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:195:        message: 'Prayer times sync failed: API error',
src/modules/prayer/tests/admin.controller.spec.ts:208:      (adminService.syncPrayerTimesForLocation as jest.Mock).mockResolvedValue(mockResult);
src/modules/prayer/tests/admin.controller.spec.ts:210:      const result = await controller.syncPrayerTimes(
src/modules/prayer/tests/admin.controller.spec.ts:225:    it('should prewarm with default 7 days', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:245:    it('should prewarm with custom days parameter', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:267:    it('should trigger prayer sync successfully', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:270:        message: 'Prayer sync triggered successfully',
src/modules/prayer/tests/admin.controller.spec.ts:282:    it('should handle prayer sync failures', async () => {
src/modules/prayer/tests/admin.controller.spec.ts:285:        message: 'Prayer sync failed: Database error',
src/modules/prayer/tests/prayer.sync.service.spec.ts:3:import { PrayerSyncService } from '../prayer.sync.service';
src/modules/prayer/tests/prayer.sync.service.spec.ts:17:  beforeEach(async () => {
src/modules/prayer/tests/prayer.sync.service.spec.ts:38:            syncJobLog: {
src/modules/prayer/tests/prayer.sync.service.spec.ts:167:  describe('syncPrayerTimesForMethod', () => {
src/modules/prayer/tests/prayer.sync.service.spec.ts:168:    it('should use custom date range when provided', async () => {
src/modules/prayer/tests/prayer.sync.service.spec.ts:207:      const result = await service.syncPrayerTimesForMethod(
src/modules/prayer/tests/prayer.sync.service.spec.ts:219:    it('should use default date range when not provided', async () => {
src/modules/prayer/tests/prayer.sync.service.spec.ts:253:      const result = await service.syncPrayerTimesForMethod(
src/modules/prayer/tests/prayer.sync.service.spec.ts:267:    it('should handle duplicate records gracefully', async () => {
src/modules/prayer/tests/prayer.sync.service.spec.ts:303:      const result1 = await service.syncPrayerTimesForMethod(
src/modules/prayer/tests/prayer.sync.service.spec.ts:311:      const result2 = await service.syncPrayerTimesForMethod(
src/modules/prayer/prayer.controller.spec.ts:19:  beforeEach(async () => {
src/modules/prayer/prayer.controller.spec.ts:39:    it("should return daily prayer times", async () => {
src/modules/prayer/prayer.controller.spec.ts:90:    it("should return monthly prayer times", async () => {
src/modules/prayer/prayer.controller.spec.ts:146:    it("should return calculation methods", async () => {
src/modules/prayer/prayer.controller.spec.ts:173:    it("should save a location", async () => {
src/modules/prayer/prayer.module.ts:4:import { PrayerSyncService } from "./prayer.sync.service";
src/modules/prayer/prayer.controller.ts:27:  async getCalculationMethods(@Res() res: Response) {
src/modules/prayer/prayer.controller.ts:37:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:50:  async getCalculationMethod(
src/modules/prayer/prayer.controller.ts:64:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:73:  async getLocations(@Res() res: Response) {
src/modules/prayer/prayer.controller.ts:82:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:92:  async getLocation(@Res() res: Response, @Param("locKey") locKey: string) {
src/modules/prayer/prayer.controller.ts:103:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:112:  async saveLocation(
src/modules/prayer/prayer.controller.ts:126:    res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:184:  async getPrayerTimes(
src/modules/prayer/prayer.controller.ts:222:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:278:  async getPrayerTimesByCity(
src/modules/prayer/prayer.controller.ts:316:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:384:  async getPrayerCalendar(
src/modules/prayer/prayer.controller.ts:433:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:489:  async getMonthlyPrayerTimes(
src/modules/prayer/prayer.controller.ts:532:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/prayer/prayer.controller.ts:544:  async getQiblaDirection(
src/modules/prayer/prayer.controller.ts:562:    res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/admin/security/audit-logger.middleware.ts:11:  async use(req: Request, res: Response, next: NextFunction) {
src/modules/admin/security/audit-logger.middleware.ts:19:      // Log the request asynchronously (don't block the response)
src/modules/admin/security/audit-logger.middleware.ts:20:      setImmediate(async () => {
src/modules/admin/security/audit-logger.middleware.ts:35:  private async logRequest(req: Request, res: Response, responseBody: any, duration: number) {
src/modules/admin/security/audit-logger.middleware.ts:106:        } else if (path.includes('/sync')) {
src/modules/admin/security/audit-logger.middleware.ts:145:    } else if (path.includes('/sync')) {
src/modules/admin/security/audit-logger.middleware.ts:146:      resource = 'sync';
src/modules/admin/security/session-manager.service.ts:29:  async createSession(
src/modules/admin/security/session-manager.service.ts:93:  async getSession(sessionId: string): Promise<SessionData | null> {
src/modules/admin/security/session-manager.service.ts:125:  async destroySession(sessionId: string): Promise<void> {
src/modules/admin/security/session-manager.service.ts:149:  async destroyAllUserSessions(userId: number): Promise<void> {
src/modules/admin/security/session-manager.service.ts:168:  async getUserSessions(userId: number): Promise<SessionData[]> {
src/modules/admin/security/session-manager.service.ts:187:  async cleanupExpiredSessions(): Promise<number> {
src/modules/admin/security/session-manager.service.ts:217:  async getActiveSessionsCount(): Promise<number> {
src/modules/admin/security/session-manager.service.ts:227:  async getSessionStats(): Promise<{
src/modules/admin/security/rate-limit.middleware.ts:47:    if (path.includes('/admin/sync')) {
src/modules/admin/security/rate-limit.middleware.ts:50:        maxRequests: 20, // 20 sync requests per 5 minutes
src/modules/admin/security/rate-limit.middleware.ts:51:        message: 'Too many sync requests, please try again later.',
src/modules/admin/security/rate-limit.middleware.ts:71:  private async applyRateLimit(
src/modules/admin/auth/jwt.strategy.ts:20:  async validate(payload: AdminUserPayload) {
src/modules/admin/auth/admin-auth.controller.ts:39:  async login(@Body() loginDto: AdminLoginDto): Promise<{ success: boolean; data: AdminLoginResponse }> {
src/modules/admin/auth/admin-auth.controller.ts:53:  async getProfile(@Request() req): Promise<{ success: boolean; data: any }> {
src/modules/admin/auth/admin-auth.controller.ts:80:  async refresh(@Body() body: { refreshToken: string }): Promise<{ success: boolean; data: { accessToken: string; refreshToken: string } }> {
src/modules/admin/auth/admin-auth.controller.ts:105:  async changePassword(
src/modules/admin/auth/admin-auth.controller.ts:132:  async getPasswordRequirements(): Promise<{ success: boolean; data: string[] }> {
src/modules/admin/auth/admin-auth.controller.ts:145:  async logout(): Promise<{ success: boolean; message: string }> {
src/modules/admin/auth/admin-auth.service.ts:37:  async validateAdmin(email: string, password: string): Promise<any> {
src/modules/admin/auth/admin-auth.service.ts:63:  async login(loginDto: AdminLoginDto): Promise<AdminLoginResponse> {
src/modules/admin/auth/admin-auth.service.ts:100:  async refreshToken(refreshToken: string): Promise<{ accessToken: string; refreshToken: string }> {
src/modules/admin/auth/admin-auth.service.ts:147:  async validateUser(payload: AdminUserPayload): Promise<any> {
src/modules/admin/auth/admin-auth.service.ts:160:  async createAdmin(email: string, password: string, role: string = 'admin'): Promise<any> {
src/modules/admin/auth/admin-auth.service.ts:198:  async changePassword(adminId: number, currentPassword: string, newPassword: string): Promise<{ success: boolean; message: string }> {
src/modules/admin/auth/admin-auth.service.ts:242:  async getAdminById(id: number): Promise<any> {
src/modules/admin/auth/admin-auth.module.ts:15:    JwtModule.registerAsync({
src/modules/admin/auth/admin-auth.module.ts:17:      useFactory: async (configService: ConfigService) => ({
src/modules/admin/job-control/job-control.controller.ts:44:  async pauseJob(@Param('jobId') jobId: string, @Request() req) {
src/modules/admin/job-control/job-control.controller.ts:60:  async resumeJob(@Param('jobId') jobId: string, @Request() req) {
src/modules/admin/job-control/job-control.controller.ts:76:  async cancelJob(@Param('jobId') jobId: string, @Request() req) {
src/modules/admin/job-control/job-control.controller.ts:92:  async deleteJob(@Param('jobId') jobId: string, @Request() req) {
src/modules/admin/job-control/job-control.controller.ts:106:  async getQueueStatus() {
src/modules/admin/job-control/job-control.controller.ts:121:  async getJobStatus(@Param('jobId') jobId: string) {
src/modules/admin/job-control/job-control.controller.ts:135:  async getJobProgress(@Param('jobId') jobId: string) {
src/modules/admin/job-control/job-control.controller.ts:155:  async getJobs(@Query() filters: JobFiltersDto) {
src/modules/admin/job-control/job-control.controller.ts:174:  async updateJobPriority(
src/modules/admin/job-control/job-control.controller.ts:192:  async getJobSchedules() {
src/modules/admin/job-control/job-control.controller.ts:206:  async updateJobSchedule(
src/modules/admin/job-control/job-control.controller.ts:225:  async toggleJobSchedule(
src/modules/admin/job-control/job-control.controller.ts:245:  async getJobHistory(
src/modules/admin/job-control/job-control.service.ts:29:  async pauseJob(jobId: string, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:31:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:50:      await this.prisma.syncJobControl.update({
src/modules/admin/job-control/job-control.service.ts:83:  async resumeJob(jobId: string, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:85:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:104:      await this.prisma.syncJobControl.update({
src/modules/admin/job-control/job-control.service.ts:130:  async cancelJob(jobId: string, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:132:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:151:      await this.prisma.syncJobControl.update({
src/modules/admin/job-control/job-control.service.ts:177:  async deleteJob(jobId: string, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:179:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:201:      await this.prisma.syncJobControl.delete({
src/modules/admin/job-control/job-control.service.ts:221:  async getJobStatus(jobId: string): Promise<JobStatus> {
src/modules/admin/job-control/job-control.service.ts:222:    const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:241:  async getJobProgress(jobId: string): Promise<JobProgress> {
src/modules/admin/job-control/job-control.service.ts:242:    const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:257:  async updateJobPriority(jobId: string, priority: number, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:259:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:268:      await this.prisma.syncJobControl.update({
src/modules/admin/job-control/job-control.service.ts:292:  async getJobSchedules(): Promise<JobSchedule[]> {
src/modules/admin/job-control/job-control.service.ts:293:    const schedules = await this.prisma.syncJobSchedule.findMany({
src/modules/admin/job-control/job-control.service.ts:311:  async updateJobSchedule(jobType: string, schedule: JobScheduleUpdate, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:313:      const existingSchedule = await this.prisma.syncJobSchedule.findUnique({
src/modules/admin/job-control/job-control.service.ts:322:      await this.prisma.syncJobSchedule.update({
src/modules/admin/job-control/job-control.service.ts:342:  async enableJobSchedule(jobType: string, enabled: boolean, userId: string): Promise<JobControlResult> {
src/modules/admin/job-control/job-control.service.ts:344:      const existingSchedule = await this.prisma.syncJobSchedule.findUnique({
src/modules/admin/job-control/job-control.service.ts:353:      await this.prisma.syncJobSchedule.update({
src/modules/admin/job-control/job-control.service.ts:374:  async getJobs(filters: JobFilters): Promise<PaginatedJobs> {
src/modules/admin/job-control/job-control.service.ts:403:      this.prisma.syncJobControl.findMany({
src/modules/admin/job-control/job-control.service.ts:409:      this.prisma.syncJobControl.count({ where }),
src/modules/admin/job-control/job-control.service.ts:435:  async getJobHistory(jobType?: string, limit: number = 100): Promise<JobHistory[]> {
src/modules/admin/job-control/job-control.service.ts:441:    const jobs = await this.prisma.syncJobControl.findMany({
src/modules/admin/job-control/job-control.service.ts:462:  async getQueueStatus(): Promise<QueueStatus> {
src/modules/admin/job-control/job-control.service.ts:466:        queueName: 'sync-queue',
src/modules/admin/job-control/job-control.service.ts:467:        waiting: stats.syncQueue?.waiting || 0,
src/modules/admin/job-control/job-control.service.ts:468:        active: stats.syncQueue?.active || 0,
src/modules/admin/job-control/job-control.service.ts:469:        completed: stats.syncQueue?.completed || 0,
src/modules/admin/job-control/job-control.service.ts:470:        failed: stats.syncQueue?.failed || 0,
src/modules/admin/job-control/job-control.service.ts:471:        delayed: stats.syncQueue?.delayed || 0,
src/modules/admin/job-control/job-control.service.ts:472:        paused: stats.syncQueue?.paused || 0,
src/modules/admin/job-control/job-control.service.ts:477:        queueName: 'sync-queue',
src/modules/admin/job-control/job-control.service.ts:489:  private async logJobAction(jobId: string, action: string, performedBy: string, metadata?: any): Promise<void> {
src/modules/admin/job-control/job-control.service.ts:491:      await this.prisma.syncJobAuditLog.create({
src/modules/admin/job-control/job-control.service.ts:505:  async createOrUpdateJobControl(jobId: string, jobType: string, jobName: string, status: string, metadata?: any): Promise<void> {
src/modules/admin/job-control/job-control.service.ts:507:      await this.prisma.syncJobControl.upsert({
src/modules/admin/job-control/job-control.service.ts:528:  async updateJobProgress(jobId: string, progress: number, currentStep?: string): Promise<void> {
src/modules/admin/job-control/job-control.service.ts:531:      const job = await this.prisma.syncJobControl.findUnique({
src/modules/admin/job-control/job-control.service.ts:547:      await this.prisma.syncJobControl.update({
src/modules/admin/admin.controller.ts:19:  async getSystemStats() {
src/modules/admin/admin.controller.ts:37:  async getDashboardSummary() {
src/modules/admin/admin.controller.ts:57:  @Get("sync-logs")
src/modules/admin/admin.controller.ts:58:  @ApiOperation({ summary: "Get sync job logs" })
src/modules/admin/admin.controller.ts:65:  async getSyncLogs(@Query("limit") limit?: string) {
src/modules/admin/admin.controller.ts:79:  @Post("sync/quran")
src/modules/admin/admin.controller.ts:80:  @ApiOperation({ summary: "Trigger Quran data sync" })
src/modules/admin/admin.controller.ts:83:    description: "Quran sync triggered successfully",
src/modules/admin/admin.controller.ts:85:  async triggerQuranSync() {
src/modules/admin/admin.controller.ts:95:  @Post("sync/prayer")
src/modules/admin/admin.controller.ts:96:  @ApiOperation({ summary: "Trigger Prayer data sync" })
src/modules/admin/admin.controller.ts:99:    description: "Prayer sync triggered successfully",
src/modules/admin/admin.controller.ts:101:  async triggerPrayerSync() {
src/modules/admin/admin.controller.ts:111:  @Post("sync/prayer/prewarm")
src/modules/admin/admin.controller.ts:114:  async prewarmPrayer(@Query('days') days?: string) {
src/modules/admin/admin.controller.ts:123:  @Post("sync/prayer/times")
src/modules/admin/admin.controller.ts:129:  @ApiQuery({ name: 'days', required: false, type: Number, description: 'Number of days to sync (default: 1)' })
src/modules/admin/admin.controller.ts:130:  @ApiQuery({ name: 'force', required: false, type: Boolean, description: 'Force sync even if data exists (default: false)' })
src/modules/admin/admin.controller.ts:134:  async syncPrayerTimes(
src/modules/admin/admin.controller.ts:145:    const result = await this.adminService.syncPrayerTimesForLocation(
src/modules/admin/admin.controller.ts:163:  @Post("sync/prayer/calendar")
src/modules/admin/admin.controller.ts:171:  @ApiQuery({ name: 'force', required: false, type: Boolean, description: 'Force sync even if data exists (default: false)' })
src/modules/admin/admin.controller.ts:175:  async syncPrayerTimesCalendar(
src/modules/admin/admin.controller.ts:187:    const result = await this.adminService.syncPrayerTimesCalendar(
src/modules/admin/admin.controller.ts:206:  @Post("sync/prayer/hijri-calendar")
src/modules/admin/admin.controller.ts:214:  @ApiQuery({ name: 'force', required: false, type: Boolean, description: 'Force sync even if data exists (default: false)' })
src/modules/admin/admin.controller.ts:218:  async syncPrayerTimesHijriCalendar(
src/modules/admin/admin.controller.ts:230:    const result = await this.adminService.syncPrayerTimesHijriCalendar(
src/modules/admin/admin.controller.ts:252:  async convertGregorianToHijri(@Query('date') date: string) {
src/modules/admin/admin.controller.ts:264:  async convertHijriToGregorian(@Query('date') date: string) {
src/modules/admin/admin.controller.ts:276:  async getCurrentTime(@Query('timezone') timezone: string) {
src/modules/admin/admin.controller.ts:287:  async getAsmaAlHusna() {
src/modules/admin/admin.controller.ts:296:  @Post("sync/hadith")
src/modules/admin/admin.controller.ts:297:  @ApiOperation({ summary: "Trigger Hadith data sync for all collections" })
src/modules/admin/admin.controller.ts:300:    description: "Hadith sync triggered successfully",
src/modules/admin/admin.controller.ts:302:  async triggerHadithSyncAll() {
src/modules/admin/admin.controller.ts:312:  @Post("sync/hadith/:collectionName")
src/modules/admin/admin.controller.ts:313:  @ApiOperation({ summary: "Trigger Hadith data sync for specific collection" })
src/modules/admin/admin.controller.ts:316:    description: "Hadith sync triggered successfully",
src/modules/admin/admin.controller.ts:318:  async triggerHadithSync(@Param("collectionName") collectionName: string) {
src/modules/admin/admin.controller.ts:328:  @Post("sync/audio")
src/modules/admin/admin.controller.ts:329:  @ApiOperation({ summary: "Trigger Audio data sync" })
src/modules/admin/admin.controller.ts:332:    description: "Audio sync triggered successfully",
src/modules/admin/admin.controller.ts:334:  async triggerAudioSync() {
src/modules/admin/admin.controller.ts:344:  @Post("sync/gold-price")
src/modules/admin/admin.controller.ts:350:  async triggerGoldPriceUpdate() {
src/modules/admin/admin.controller.ts:360:  @Post("sync/:module")
src/modules/admin/admin.controller.ts:361:  @ApiOperation({ summary: "Trigger sync for any module" })
src/modules/admin/admin.controller.ts:364:    description: "Module sync triggered successfully",
src/modules/admin/admin.controller.ts:366:  async triggerModuleSync(@Param("module") module: string) {
src/modules/admin/admin.controller.ts:379:  async getQueueStats() {
src/modules/admin/admin.controller.ts:391:  async clearCache() {
src/modules/admin/admin.controller.ts:405:  async healthCheck() {
src/modules/admin/admin.controller.ts:433:  async getPrayerMethods() {
src/modules/admin/admin.controller.ts:444:  async getPrayerMadhabs() {
src/modules/admin/admin.service.ts:5:import { QuranSyncService } from "../quran/quran.sync.service";
src/modules/admin/admin.service.ts:6:import { PrayerSyncService } from "../prayer/prayer.sync.service";
src/modules/admin/admin.service.ts:7:import { HadithSyncService } from "../hadith/hadith-sync.service";
src/modules/admin/admin.service.ts:8:import { AudioSyncService } from "../audio/audio.sync.service";
src/modules/admin/admin.service.ts:65:  async getSystemStats(): Promise<SystemStats> {
src/modules/admin/admin.service.ts:99:  async getModuleSummary() {
src/modules/admin/admin.service.ts:110:          syncStatus: this.getSyncStatus(stats.quran.lastSync),
src/modules/admin/admin.service.ts:122:          syncStatus: this.getSyncStatus(stats.hadith.lastSync),
src/modules/admin/admin.service.ts:134:          syncStatus: this.getSyncStatus(stats.prayer.lastSync),
src/modules/admin/admin.service.ts:145:          syncStatus: 'idle' as const,
src/modules/admin/admin.service.ts:155:          syncStatus: this.getSyncStatus(stats.audio.lastSync),
src/modules/admin/admin.service.ts:166:          syncStatus: this.getSyncStatus(stats.finance.lastUpdate),
src/modules/admin/admin.service.ts:189:  private async getQuranStats() {
src/modules/admin/admin.service.ts:194:      this.prisma.syncJobLog.findFirst({
src/modules/admin/admin.service.ts:212:  private async getPrayerStats() {
src/modules/admin/admin.service.ts:216:      this.prisma.syncJobLog.findFirst({
src/modules/admin/admin.service.ts:233:  private async getHadithStats() {
src/modules/admin/admin.service.ts:238:      this.prisma.syncJobLog.findFirst({
src/modules/admin/admin.service.ts:240:          jobName: "hadith-sync",
src/modules/admin/admin.service.ts:256:  private async getAudioStats() {
src/modules/admin/admin.service.ts:260:      this.prisma.syncJobLog.findFirst({
src/modules/admin/admin.service.ts:262:          jobName: { in: ["audio-files-sync", "reciters-sync"] },
src/modules/admin/admin.service.ts:277:  private async getFinanceStats() {
src/modules/admin/admin.service.ts:280:      this.prisma.syncJobLog.findFirst({
src/modules/admin/admin.service.ts:296:  private async getSystemHealthStats() {
src/modules/admin/admin.service.ts:310:  private async checkRedisConnection(): Promise<boolean> {
src/modules/admin/admin.service.ts:319:  private async checkDatabaseConnection(): Promise<boolean> {
src/modules/admin/admin.service.ts:328:  async triggerQuranSync(): Promise<{ success: boolean; message: string; data?: any }> {
src/modules/admin/admin.service.ts:330:      // Create sync job
src/modules/admin/admin.service.ts:331:      const syncJob = {
src/modules/admin/admin.service.ts:333:        action: 'sync' as const,
src/modules/admin/admin.service.ts:335:        priority: 1, // High priority for manual sync
src/modules/admin/admin.service.ts:339:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/admin/admin.service.ts:341:      this.logger.log(`Quran sync job queued with ID: ${job.id}`);
src/modules/admin/admin.service.ts:345:        message: "Quran sync queued successfully",
src/modules/admin/admin.service.ts:352:      this.logger.error("Failed to trigger Quran sync", error.stack);
src/modules/admin/admin.service.ts:355:        message: `Quran sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:360:  async triggerPrayerSync(): Promise<{ success: boolean; message: string; data?: any }> {
src/modules/admin/admin.service.ts:362:      // Create sync job
src/modules/admin/admin.service.ts:363:      const syncJob = {
src/modules/admin/admin.service.ts:365:        action: 'sync' as const,
src/modules/admin/admin.service.ts:367:        priority: 2, // Medium priority for prayer sync
src/modules/admin/admin.service.ts:371:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/admin/admin.service.ts:373:      this.logger.log(`Prayer sync job queued with ID: ${job.id}`);
src/modules/admin/admin.service.ts:377:        message: "Prayer sync queued successfully",
src/modules/admin/admin.service.ts:384:      this.logger.error("Failed to trigger Prayer sync", error.stack);
src/modules/admin/admin.service.ts:387:        message: `Prayer sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:392:  async prewarmPrayerTimes(days: number = 7) {
src/modules/admin/admin.service.ts:482:  async syncPrayerTimesForLocation(
src/modules/admin/admin.service.ts:513:      this.logger.log(`Admin service: Calling syncPrayerTimesForMethod with dateRange: ${today.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]} (${days} days)`);
src/modules/admin/admin.service.ts:516:      const result = await this.prayerSync.syncPrayerTimesForMethod(
src/modules/admin/admin.service.ts:532:        message: result.success ? "Prayer times sync completed" : "Prayer times sync failed",
src/modules/admin/admin.service.ts:536:      this.logger.error("Failed to sync prayer times for location", error.stack);
src/modules/admin/admin.service.ts:539:        message: `Prayer times sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:544:  async syncPrayerTimesCalendar(
src/modules/admin/admin.service.ts:570:      this.logger.log(`Admin service: Calling syncPrayerTimesCalendar for ${year}-${month} with method=${method.id}, school=${school}, force=${force}`);
src/modules/admin/admin.service.ts:572:      const result = await this.prayerSync.syncPrayerTimesCalendar(
src/modules/admin/admin.service.ts:589:        message: result.success ? `Prayer times calendar sync completed for ${year}-${month}` : "Prayer times calendar sync failed",
src/modules/admin/admin.service.ts:593:      this.logger.error("Failed to sync prayer times calendar", error.stack);
src/modules/admin/admin.service.ts:596:        message: `Prayer times calendar sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:601:  async syncPrayerTimesHijriCalendar(
src/modules/admin/admin.service.ts:627:      this.logger.log(`Admin service: Calling syncPrayerTimesHijriCalendar for Hijri ${hijriYear}-${hijriMonth} with method=${method.id}, school=${school}, force=${force}`);
src/modules/admin/admin.service.ts:629:      const result = await this.prayerSync.syncPrayerTimesHijriCalendar(
src/modules/admin/admin.service.ts:646:        message: result.success ? `Prayer times Hijri calendar sync completed for ${hijriYear}-${hijriMonth}` : "Prayer times Hijri calendar sync failed",
src/modules/admin/admin.service.ts:650:      this.logger.error("Failed to sync prayer times Hijri calendar", error.stack);
src/modules/admin/admin.service.ts:653:        message: `Prayer times Hijri calendar sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:658:  async convertGregorianToHijri(gregorianDate: string) {
src/modules/admin/admin.service.ts:667:  async convertHijriToGregorian(hijriDate: string) {
src/modules/admin/admin.service.ts:676:  async getCurrentTime(timezone: string) {
src/modules/admin/admin.service.ts:685:  async getAsmaAlHusna() {
src/modules/admin/admin.service.ts:694:  async triggerHadithSync(
src/modules/admin/admin.service.ts:698:      // Create sync job
src/modules/admin/admin.service.ts:699:      const syncJob = {
src/modules/admin/admin.service.ts:701:        action: 'sync' as const,
src/modules/admin/admin.service.ts:703:        priority: 1, // High priority for manual sync
src/modules/admin/admin.service.ts:707:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/admin/admin.service.ts:709:      this.logger.log(`Hadith sync job queued with ID: ${job.id}`);
src/modules/admin/admin.service.ts:714:          ? `Hadith sync for ${collectionName} queued successfully`
src/modules/admin/admin.service.ts:715:          : "Hadith sync for all collections queued successfully",
src/modules/admin/admin.service.ts:719:      this.logger.error("Failed to trigger Hadith sync", error.stack);
src/modules/admin/admin.service.ts:722:        message: `Hadith sync failed: ${error.message}`,
src/modules/admin/admin.service.ts:727:  async triggerAudioSync(): Promise<{ success: boolean; message: string }> {
src/modules/admin/admin.service.ts:730:      const jobId = `audio-sync-${Date.now()}`;
src/modules/admin/admin.service.ts:740:      await this.jobControlService.updateJobProgress(jobId, 5, 'Starting audio sync...');
src/modules/admin/admin.service.ts:744:      const recitersResult = await this.audioSync.syncReciters();
src/modules/admin/admin.service.ts:757:      await this.jobControlService.updateJobProgress(jobId, 15, `Found ${totalReciters} reciters, syncing audio files...`);
src/modules/admin/admin.service.ts:772:            const result = await this.audioSync.syncAudioFilesForChapter(
src/modules/admin/admin.service.ts:788:            this.logger.error(`Failed to sync audio for reciter ${reciter.sourceId}, chapter ${chapterId}:`, error);
src/modules/admin/admin.service.ts:794:      await this.jobControlService.updateJobProgress(jobId, 100, 'Audio sync completed successfully');
src/modules/admin/admin.service.ts:807:      return { success: true, message: "Audio sync triggered successfully" };
src/modules/admin/admin.service.ts:809:      this.logger.error("Failed to trigger Audio sync", error.stack);
src/modules/admin/admin.service.ts:813:        const jobId = `audio-sync-${Date.now()}`;
src/modules/admin/admin.service.ts:825:      return { success: false, message: `Audio sync failed: ${error.message}` };
src/modules/admin/admin.service.ts:829:  async triggerGoldPriceUpdate(): Promise<{
src/modules/admin/admin.service.ts:835:      // Create sync job
src/modules/admin/admin.service.ts:836:      const syncJob = {
src/modules/admin/admin.service.ts:838:        action: 'sync' as const,
src/modules/admin/admin.service.ts:844:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/admin/admin.service.ts:846:      this.logger.log(`Gold price sync job queued with ID: ${job.id}`);
src/modules/admin/admin.service.ts:850:        message: "Gold price sync queued successfully",
src/modules/admin/admin.service.ts:865:  async triggerModuleSync(module: string): Promise<{
src/modules/admin/admin.service.ts:887:            message: "Zakat calculations are performed on-demand, no sync needed",
src/modules/admin/admin.service.ts:896:      this.logger.error(`Failed to trigger sync for module ${module}`, error.stack);
src/modules/admin/admin.service.ts:904:  async getSyncLogs(limit: number = 50): Promise<any[]> {
src/modules/admin/admin.service.ts:905:    return this.prisma.syncJobLog.findMany({
src/modules/admin/admin.service.ts:911:  async getQueueStats(): Promise<any> {
src/modules/admin/admin.service.ts:920:  async clearCache(): Promise<{ success: boolean; message: string }> {
src/modules/admin/admin.service.ts:950:  async getPrayerMethods(): Promise<any[]> {
src/modules/admin/content-management/content-management.service.ts:33:  async getQuranChapters(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:64:  async getQuranChapterById(id: number): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:77:  async createQuranChapter(data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:101:  async updateQuranChapter(id: number, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:116:  async deleteQuranChapter(id: number): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:130:  async getHadithCollections(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:157:  async getHadithCollectionById(id: number): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:170:  async createHadithCollection(data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:191:  async updateHadithCollection(id: number, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:206:  async deleteHadithCollection(id: number): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:220:  async getGoldPrices(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:254:  async getGoldPriceById(id: string): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:266:  async createGoldPrice(data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:289:  async updateGoldPrice(id: string, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:307:  async deleteGoldPrice(id: string): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:321:  async getReciters(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:351:  async getReciterById(id: number): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:363:  async createReciter(data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:386:  async updateReciter(id: number, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:401:  async deleteReciter(id: number): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:415:  async getContent(module: string, query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:434:  async getContentById(module: string, id: number | string): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:451:  async createContent(module: string, data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:468:  async updateContent(module: string, id: number | string, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:485:  async deleteContent(module: string, id: number | string): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:503:  async getPrayerLocations(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:533:  async getPrayerLocationById(id: number): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:539:  async createPrayerLocation(data: CreateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:561:  async updatePrayerLocation(id: number, data: UpdateContentDto): Promise<ContentItem> {
src/modules/admin/content-management/content-management.service.ts:575:  async deletePrayerLocation(id: number): Promise<void> {
src/modules/admin/content-management/content-management.service.ts:586:  async getPrayerTimesOverview(query: ContentQuery = {}): Promise<{ data: ContentItem[]; total: number }> {
src/modules/admin/content-management/content-management.service.ts:682:  async getPrayerMethods(): Promise<any[]> {
src/modules/admin/content-management/content-management.controller.ts:44:  async getContent(
src/modules/admin/content-management/content-management.controller.ts:89:  async getContentById(
src/modules/admin/content-management/content-management.controller.ts:111:  async createContent(
src/modules/admin/content-management/content-management.controller.ts:136:  async updateContent(
src/modules/admin/content-management/content-management.controller.ts:155:  async deleteContent(
src/modules/admin/content-management/content-management.controller.ts:183:  async bulkCreateContent(
src/modules/admin/content-management/content-management.controller.ts:226:  async bulkDeleteContent(
src/modules/admin/content-management/content-management.controller.ts:260:  async exportContent(
src/modules/admin/content-management/content-management.controller.ts:301:  async importContent(
src/modules/admin/user-management/user-management.service.ts:54:  async createUser(createUserDto: CreateUserDto): Promise<UserResponse> {
src/modules/admin/user-management/user-management.service.ts:97:  async getAllUsers(): Promise<UserResponse[]> {
src/modules/admin/user-management/user-management.service.ts:105:  async getUserById(id: number): Promise<UserResponse> {
src/modules/admin/user-management/user-management.service.ts:117:  async getUserByEmail(email: string): Promise<UserResponse> {
src/modules/admin/user-management/user-management.service.ts:129:  async updateUser(id: number, updateUserDto: UpdateUserDto): Promise<UserResponse> {
src/modules/admin/user-management/user-management.service.ts:159:  async deleteUser(id: number): Promise<void> {
src/modules/admin/user-management/user-management.service.ts:186:  async changePassword(id: number, currentPassword: string, newPassword: string): Promise<void> {
src/modules/admin/user-management/user-management.service.ts:213:  async resetPassword(id: number, newPassword: string): Promise<void> {
src/modules/admin/user-management/user-management.service.ts:235:  async createAuditLog(auditLogDto: AuditLogDto): Promise<void> {
src/modules/admin/user-management/user-management.service.ts:241:  async getAuditLogs(
src/modules/admin/user-management/user-management.service.ts:275:  async hasPermission(userId: number, permission: string): Promise<boolean> {
src/modules/admin/user-management/user-management.service.ts:290:  async updateUserPermissions(userId: number, permissions: string[]): Promise<UserResponse> {
src/modules/admin/user-management/user-management.service.ts:310:  async getUserStats(): Promise<any> {
src/modules/admin/user-management/user-management.service.ts:370:        'sync:quran',
src/modules/admin/user-management/user-management.service.ts:371:        'sync:hadith',
src/modules/admin/user-management/user-management.service.ts:372:        'sync:prayer',
src/modules/admin/user-management/user-management.service.ts:373:        'sync:finance',
src/modules/admin/user-management/user-management.service.ts:374:        'sync:audio'
src/modules/admin/user-management/user-management.service.ts:391:        'sync:quran',
src/modules/admin/user-management/user-management.service.ts:392:        'sync:hadith',
src/modules/admin/user-management/user-management.service.ts:393:        'sync:prayer',
src/modules/admin/user-management/user-management.service.ts:394:        'sync:finance',
src/modules/admin/user-management/user-management.service.ts:395:        'sync:audio'
src/modules/admin/user-management/user-management.controller.ts:52:  async createUser(@Body() createUserDto: CreateUserDto, @Request() req) {
src/modules/admin/user-management/user-management.controller.ts:76:  async getAllUsers() {
src/modules/admin/user-management/user-management.controller.ts:88:  async getUserStats() {
src/modules/admin/user-management/user-management.controller.ts:104:  async getAuditLogs(
src/modules/admin/user-management/user-management.controller.ts:130:  async getUserById(@Param('id', ParseIntPipe) id: number) {
src/modules/admin/user-management/user-management.controller.ts:156:  async updateUser(
src/modules/admin/user-management/user-management.controller.ts:187:  async deleteUser(@Param('id', ParseIntPipe) id: number, @Request() req) {
src/modules/admin/user-management/user-management.controller.ts:218:  async changePassword(
src/modules/admin/user-management/user-management.controller.ts:258:  async resetPassword(
src/modules/admin/user-management/user-management.controller.ts:294:  async updatePermissions(
src/modules/admin/user-management/user-management.controller.ts:326:  async checkPermission(
src/modules/admin/api-monitoring/api-monitoring.controller.ts:41:  async getEndpointStats(@Query() filters: ApiMonitoringFiltersDto) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:70:  async getClientIpStats(@Query() filters: IpStatsFiltersDto) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:95:  async getApiRequestLogs(@Query() filters: ApiRequestLogFiltersDto) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:125:  async getApiAnalytics(@Query('timeRange') timeRange: string = '24h') {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:154:  async getTopEndpoints(@Query('limit') limit?: number) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:175:  async getErrorRates(@Query('timeRange') timeRange: string = '24h') {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:197:  async getRateLimitRules() {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:218:  async createRateLimitRule(@Body() rule: CreateRateLimitRuleDto) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:239:  async updateRateLimitRule(
src/modules/admin/api-monitoring/api-monitoring.controller.ts:263:  async deleteRateLimitRule(@Param('id') id: number) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:285:  async getIpBlockingRules() {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:306:  async blockIp(@Body() blockData: BlockIpDto) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:332:  async unblockIp(@Param('ipAddress') ipAddress: string) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:353:  async getIpStats(@Param('ipAddress') ipAddress: string) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:374:  async getTopBlockedIps(@Query('limit') limit?: number) {
src/modules/admin/api-monitoring/api-monitoring.controller.ts:395:  async getBlockingHistory(@Param('ipAddress') ipAddress: string) {
src/modules/admin/api-monitoring/rate-limiting.service.ts:21:  async getRateLimitRules(): Promise<RateLimitRule[]> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:32:  async createRateLimitRule(rule: CreateRateLimitRuleDto): Promise<RateLimitRule> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:49:  async updateRateLimitRule(id: number, rule: UpdateRateLimitRuleDto): Promise<RateLimitRule> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:67:  async deleteRateLimitRule(id: number): Promise<void> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:78:  async checkRateLimit(ip: string, endpoint: string, method: string): Promise<RateLimitResult> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:131:  async incrementRequestCount(ip: string, endpoint: string, windowSeconds: number): Promise<void> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:143:  async getRateLimitStatus(ip: string, endpoint: string): Promise<RateLimitStatus> {
src/modules/admin/api-monitoring/rate-limiting.service.ts:180:  private async findMatchingRule(endpoint: string, method: string): Promise<RateLimitRule | null> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:23:  async logRequest(logData: ApiRequestLog): Promise<void> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:53:  async updateEndpointStats(
src/modules/admin/api-monitoring/api-monitoring.service.ts:87:  private async calculateAverageLatency(endpoint: string, newLatency: number): Promise<number> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:107:  private async updateClientIpStats(ipAddress: string, statusCode: number): Promise<void> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:131:  async getEndpointStats(filters?: ApiMonitoringFilters): Promise<ApiEndpointStat[]> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:155:  async getClientIpStats(filters?: IpStatsFilters): Promise<ClientIpStat[]> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:175:  async getApiRequestLogs(filters?: ApiRequestLogFilters): Promise<PaginatedApiLogs> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:234:  async getApiAnalytics(timeRange: string = '24h'): Promise<ApiAnalytics> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:291:  async getTopEndpoints(limit: number = 10): Promise<TopEndpoint[]> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:312:  async getErrorRates(timeRange: string = '24h'): Promise<ErrorRate[]> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:356:  private async getTotalRequests(startDate: Date): Promise<number> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:362:  private async getTotalErrors(startDate: Date): Promise<number> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:371:  private async getAverageLatency(startDate: Date): Promise<number> {
src/modules/admin/api-monitoring/api-monitoring.service.ts:380:  private async getRequestTrends(startDate: Date): Promise<RequestTrend[]> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:17:  async getIpBlockingRules(): Promise<IpBlockingRule[]> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:28:  async blockIp(
src/modules/admin/api-monitoring/ip-blocking.service.ts:82:  async unblockIp(ipAddress: string): Promise<void> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:109:  async isIpBlocked(ipAddress: string): Promise<boolean> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:129:  async getIpStats(ipAddress: string): Promise<ClientIpStat | null> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:140:  async getTopBlockedIps(limit: number = 10): Promise<TopBlockedIp[]> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:162:  async getBlockingHistory(ipAddress: string): Promise<BlockingHistory[]> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:187:  async getBlockedIpsCount(): Promise<number> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:198:  async getRecentlyBlockedIps(limit: number = 10): Promise<IpBlockingRule[]> {
src/modules/admin/api-monitoring/ip-blocking.service.ts:211:  async cleanupExpiredBlocks(): Promise<number> {
src/modules/quran/quran.module.ts:5:import { QuranSyncService } from "./quran.sync.service";
src/modules/quran/quran.controller.ts:37:  async getChapters(
src/modules/quran/quran.controller.ts:53:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:66:  async getChapter(
src/modules/quran/quran.controller.ts:80:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:109:  async getChapterVerses(
src/modules/quran/quran.controller.ts:134:        res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:152:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:172:  async getVerse(
src/modules/quran/quran.controller.ts:191:        res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:207:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:225:  async getTranslations(
src/modules/quran/quran.controller.ts:243:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:262:  async getVerseTranslations(
src/modules/quran/quran.controller.ts:285:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:307:  async getReciters(@Query("language") language: string, @Res() res: Response) {
src/modules/quran/quran.controller.ts:317:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:332:  async getRecitationByChapter(
src/modules/quran/quran.controller.ts:348:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:361:  async getRecitationByAyah(
src/modules/quran/quran.controller.ts:373:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:390:  async getTafsirs(@Query("language") language: string, @Res() res: Response) {
src/modules/quran/quran.controller.ts:400:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:424:  async getVerseTafsir(
src/modules/quran/quran.controller.ts:452:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.controller.ts:475:  async searchQuran(
src/modules/quran/quran.controller.ts:493:      res.setHeader("X-DeenMate-Source", "live-sync");
src/modules/quran/quran.service.ts:19:  async getChapters(page = 1, limit = 10) {
src/modules/quran/quran.service.ts:70:  async getChapter(chapterNumber: number) {
src/modules/quran/quran.service.ts:108:  async getVersesByChapter(chapterNumber: number, page = 1, limit = 10) {
src/modules/quran/quran.service.ts:193:  async getVerse(verseKey: string) {
src/modules/quran/quran.service.ts:250:  async getTranslationResources(page = 1, limit = 10) {
src/modules/quran/quran.service.ts:307:  async getTranslationResourcesFiltered(
src/modules/quran/quran.service.ts:353:  async getVersesByChapterWithTranslations(
src/modules/quran/quran.service.ts:371:  async getVerseWithTranslations(
src/modules/quran/quran.service.ts:383:  async getVerseTranslations(verseKey: string, resourceIds?: number[]) {
src/modules/quran/quran.service.ts:483:  async searchQuran(query: string, page = 1, limit = 10) {
src/modules/quran/quran.service.ts:544:  async getReciters(language?: string) {
src/modules/quran/quran.service.ts:566:  async getTafsirResources(language?: string) {
src/modules/quran/quran.service.ts:588:  async getRecitationByChapter(
src/modules/quran/quran.service.ts:619:  async getRecitationByAyah(recitationId: number, verseKey: string) {
src/modules/quran/quran.service.ts:643:  async getVerseTafsir(
src/modules/quran/quran.service.ts:783:  private async resolveEnBnResourceIds(): Promise<number[]> {
src/modules/quran/quran.service.ts:849:  private async fallbackToUpstream(endpoint: string, params: any) {
src/modules/quran/quran-sync.worker.ts:5:import { QuranSyncService } from "./quran.sync.service";
src/modules/quran/quran-sync.worker.ts:23:  async processJob(job: Job<QuranSyncJob>) {
src/modules/quran/quran-sync.worker.ts:29:          await this.syncChapters();
src/modules/quran/quran-sync.worker.ts:33:            await this.syncVerses(job.data.chapterId);
src/modules/quran/quran-sync.worker.ts:37:          await this.syncTranslations();
src/modules/quran/quran-sync.worker.ts:40:          await this.syncReciters();
src/modules/quran/quran-sync.worker.ts:43:          throw new Error(`Unknown sync type: ${job.data.type}`);
src/modules/quran/quran-sync.worker.ts:46:      // Clear cache after sync
src/modules/quran/quran-sync.worker.ts:57:  private async syncChapters() {
src/modules/quran/quran-sync.worker.ts:59:    await this.quranSync.syncChapters();
src/modules/quran/quran-sync.worker.ts:62:  private async syncVerses(chapterId: number) {
src/modules/quran/quran-sync.worker.ts:64:    await this.quranSync.syncVerses();
src/modules/quran/quran-sync.worker.ts:67:  private async syncTranslations() {
src/modules/quran/quran-sync.worker.ts:69:    await this.quranSync.syncTranslationResources();
src/modules/quran/quran-sync.worker.ts:70:    await this.quranSync.syncVerseTranslations();
src/modules/quran/quran-sync.worker.ts:73:  private async syncReciters() {
src/modules/quran/quran-sync.worker.ts:75:    // TODO: Implement reciters sync when method is available
src/modules/quran/quran-sync.worker.ts:78:  private async clearCache(type: string) {
src/modules/quran/quran.sync.service.ts:38:  async syncChapters(options: QuranSyncOptions = {}): Promise<QuranSyncResult> {
src/modules/quran/quran.sync.service.ts:42:    this.logger.log(`Starting Quran chapters sync (Job: ${jobId})`);
src/modules/quran/quran.sync.service.ts:48:          this.logger.log("Skipping chapters sync - recent sync detected");
src/modules/quran/quran.sync.service.ts:134:          const errorMsg = `Failed to sync chapter ${chapter.id}: ${error.message}`;
src/modules/quran/quran.sync.service.ts:167:        `Quran chapters sync completed: ${JSON.stringify(result)}`,
src/modules/quran/quran.sync.service.ts:171:      const errorMsg = `Quran chapters sync failed: ${error.message}`;
src/modules/quran/quran.sync.service.ts:197:  async syncVerses(options: QuranSyncOptions = {}): Promise<QuranSyncResult> {
src/modules/quran/quran.sync.service.ts:201:    this.logger.log(`Starting Quran verses sync (Job: ${jobId})`);
src/modules/quran/quran.sync.service.ts:207:          this.logger.log("Skipping verses sync - recent sync detected");
src/modules/quran/quran.sync.service.ts:285:              const errorMsg = `Failed to sync verse ${verse.id}: ${verseError.message}`;
src/modules/quran/quran.sync.service.ts:325:      this.logger.log(`Quran verses sync completed: ${JSON.stringify(result)}`);
src/modules/quran/quran.sync.service.ts:328:      const errorMsg = `Quran verses sync failed: ${error.message}`;
src/modules/quran/quran.sync.service.ts:354:  async syncTranslationResources(
src/modules/quran/quran.sync.service.ts:365:      `Starting Quran translation resources sync (Job: ${jobId})`,
src/modules/quran/quran.sync.service.ts:373:            "Skipping translation resources sync - recent sync detected",
src/modules/quran/quran.sync.service.ts:453:          const errorMsg = `Failed to sync translation resource ${(resource && resource.id) || "unknown"}: ${error instanceof Error ? error.message : String(error)}`;
src/modules/quran/quran.sync.service.ts:486:        `Quran translation resources sync completed: ${JSON.stringify(result)}`,
src/modules/quran/quran.sync.service.ts:493:      const errorMsg = `Quran translation resources sync failed: ${msg}`;
src/modules/quran/quran.sync.service.ts:593:  private async getLastSyncTime(resource: string): Promise<Date | null> {
src/modules/quran/quran.sync.service.ts:594:    const lastJob = await (this.prisma as any).syncJobLog.findFirst({
src/modules/quran/quran.sync.service.ts:611:  async syncVerseTranslations(
src/modules/quran/quran.sync.service.ts:622:      `Starting Quran verse translations sync (Job: ${jobId})`,
src/modules/quran/quran.sync.service.ts:630:            "Skipping verse translations sync - recent sync detected",
src/modules/quran/quran.sync.service.ts:655:        this.logger.warn("No translation resources found. Run translation resources sync first.");
src/modules/quran/quran.sync.service.ts:765:        `Quran verse translations sync completed: ${totalProcessed} processed, ${totalInserted} inserted, ${totalUpdated} updated, ${totalFailed} failed`,
src/modules/quran/quran.sync.service.ts:779:      this.logger.error(`Quran verse translations sync failed: ${error.message}`);
src/modules/quran/quran.sync.service.ts:793:  private async logSyncJob(
src/modules/quran/quran.sync.service.ts:807:      await (this.prisma as any).syncJobLog.create({
src/modules/quran/quran.sync.service.ts:815:      this.logger.error(`Failed to log sync job: ${error.message}`);
src/modules/quran/quran.sync.service.ts:819:  private async delay(ms: number): Promise<void> {
src/modules/quran/quran.controller.spec.ts:23:  beforeEach(async () => {
src/modules/quran/quran.controller.spec.ts:43:    it("should return chapters", async () => {
src/modules/quran/quran.controller.spec.ts:69:    it("should return a specific chapter", async () => {
src/modules/quran/quran.controller.spec.ts:97:    it("should return verses for a chapter", async () => {
src/modules/quran/quran.controller.spec.ts:138:    it("should return translation resources", async () => {
src/modules/common/scheduler.service.ts:5:import { QuranSyncService } from "../quran/quran.sync.service";
src/modules/common/scheduler.service.ts:6:import { PrayerSyncService } from "../prayer/prayer.sync.service";
src/modules/common/scheduler.service.ts:7:import { HadithSyncService } from "../hadith/hadith-sync.service";
src/modules/common/scheduler.service.ts:8:import { AudioSyncService } from "../audio/audio.sync.service";
src/modules/common/scheduler.service.ts:25:  // Daily Quran sync at 3:00 AM
src/modules/common/scheduler.service.ts:27:    name: "quran-daily-sync",
src/modules/common/scheduler.service.ts:30:  async scheduledQuranSync(): Promise<void> {
src/modules/common/scheduler.service.ts:31:    this.logger.log("Starting scheduled Quran sync");
src/modules/common/scheduler.service.ts:36:      // Queue the quran sync job instead of running synchronously
src/modules/common/scheduler.service.ts:37:      const syncJob = {
src/modules/common/scheduler.service.ts:39:        action: 'sync' as const,
src/modules/common/scheduler.service.ts:43:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/common/scheduler.service.ts:44:      this.logger.log(`Scheduled Quran sync job queued with ID: ${job.id}`);
src/modules/common/scheduler.service.ts:47:      this.logger.log("Scheduled Quran sync queued successfully");
src/modules/common/scheduler.service.ts:49:      this.logger.error("Scheduled Quran sync failed", error.stack);
src/modules/common/scheduler.service.ts:64:  async scheduledPrayerPrewarm(): Promise<void> {
src/modules/common/scheduler.service.ts:70:      // Queue the prayer sync job instead of running synchronously
src/modules/common/scheduler.service.ts:71:      const syncJob = {
src/modules/common/scheduler.service.ts:73:        action: 'sync' as const,
src/modules/common/scheduler.service.ts:77:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/common/scheduler.service.ts:78:      this.logger.log(`Scheduled Prayer sync job queued with ID: ${job.id}`);
src/modules/common/scheduler.service.ts:93:  // Daily Hadith sync at 2:00 AM
src/modules/common/scheduler.service.ts:95:    name: "hadith-daily-sync",
src/modules/common/scheduler.service.ts:98:  async scheduledHadithSync(): Promise<void> {
src/modules/common/scheduler.service.ts:99:    this.logger.log("Starting scheduled Hadith sync");
src/modules/common/scheduler.service.ts:102:      await this.logSyncJob("hadith-sync", "hadith-collections", "started");
src/modules/common/scheduler.service.ts:104:      // Queue the hadith sync job instead of running synchronously
src/modules/common/scheduler.service.ts:105:      const syncJob = {
src/modules/common/scheduler.service.ts:107:        action: 'sync' as const,
src/modules/common/scheduler.service.ts:111:      const job = await this.workerService.addSyncJob(syncJob);
src/modules/common/scheduler.service.ts:112:      this.logger.log(`Scheduled Hadith sync job queued with ID: ${job.id}`);
src/modules/common/scheduler.service.ts:114:      await this.logSyncJob("hadith-sync", "hadith-collections", "started");
src/modules/common/scheduler.service.ts:115:      this.logger.log("Scheduled Hadith sync queued successfully");
src/modules/common/scheduler.service.ts:117:      this.logger.error("Scheduled Hadith sync failed", error.stack);
src/modules/common/scheduler.service.ts:119:        "hadith-sync",
src/modules/common/scheduler.service.ts:127:  // Weekly Audio sync on Sundays at 5:00 AM
src/modules/common/scheduler.service.ts:129:    name: "audio-weekly-sync",
src/modules/common/scheduler.service.ts:132:  async scheduledAudioSync(): Promise<void> {
src/modules/common/scheduler.service.ts:133:    this.logger.log("Starting scheduled Audio sync");
src/modules/common/scheduler.service.ts:136:      await this.logSyncJob("audio-sync", "audio-files", "started");
src/modules/common/scheduler.service.ts:137:      await this.audioSync.syncReciters();
src/modules/common/scheduler.service.ts:138:      await this.audioSync.syncAllAudioFiles();
src/modules/common/scheduler.service.ts:139:      await this.logSyncJob("audio-sync", "audio-files", "success");
src/modules/common/scheduler.service.ts:140:      this.logger.log("Scheduled Audio sync completed successfully");
src/modules/common/scheduler.service.ts:142:      this.logger.error("Scheduled Audio sync failed", error.stack);
src/modules/common/scheduler.service.ts:144:        "audio-sync",
src/modules/common/scheduler.service.ts:157:  async scheduledGoldPriceUpdate(): Promise<void> {
src/modules/common/scheduler.service.ts:181:  async scheduledCacheCleanup(): Promise<void> {
src/modules/common/scheduler.service.ts:185:      // Clean up old sync job logs (keep last 30 days)
src/modules/common/scheduler.service.ts:189:      const deletedLogs = await this.prisma.syncJobLog.deleteMany({
src/modules/common/scheduler.service.ts:198:        `Cache cleanup completed. Deleted ${deletedLogs.count} old sync logs`,
src/modules/common/scheduler.service.ts:210:  async scheduledHealthCheck(): Promise<void> {
src/modules/common/scheduler.service.ts:227:  private async logSyncJob(
src/modules/common/scheduler.service.ts:235:        await this.prisma.syncJobLog.create({
src/modules/common/scheduler.service.ts:244:        const latestJob = await this.prisma.syncJobLog.findFirst({
src/modules/common/scheduler.service.ts:258:          await this.prisma.syncJobLog.update({
src/modules/common/scheduler.service.ts:271:        `Failed to log sync job: ${logError.message}`,
src/modules/common/scheduler.service.ts:278:  async triggerQuranSync(): Promise<void> {
src/modules/common/scheduler.service.ts:282:  async triggerPrayerSync(): Promise<void> {
src/modules/common/scheduler.service.ts:286:  async triggerHadithSync(): Promise<void> {
src/modules/common/scheduler.service.ts:290:  async triggerAudioSync(): Promise<void> {
src/modules/common/scheduler.service.ts:294:  async triggerGoldPriceUpdate(): Promise<void> {
src/modules/common/scheduler.service.ts:298:  async triggerCacheCleanup(): Promise<void> {
src/modules/audio/reciter-manager.service.ts:24:  async getAllReciters(): Promise<ReciterInfo[]> {
src/modules/audio/reciter-manager.service.ts:36:  async getReciterBySourceId(sourceId: number): Promise<ReciterInfo | null> {
src/modules/audio/reciter-manager.service.ts:51:  async getWorkingReciters(): Promise<ReciterInfo[]> {
src/modules/audio/reciter-manager.service.ts:140:  async getReciterStats(): Promise<{
src/modules/audio/audio.controller.ts:15:  async getVerseAudio(
src/modules/audio/audio.controller.ts:43:  async getChapterAudio(
src/modules/audio/audio.controller.ts:68:  async getAvailableQualities() {
src/modules/audio/audio.controller.ts:83:  async getReciterAudioStats(
src/modules/audio/audio.controller.ts:100:  async searchAudio(
src/modules/audio/audio.controller.ts:139:  async validateAudioUrl(@Query("url") url: string) {
src/modules/audio/audio.controller.ts:159:  async getAllReciters() {
src/modules/audio/audio.controller.ts:171:  async getWorkingReciters() {
src/modules/audio/audio.controller.ts:183:  async getReciterStats() {
src/modules/audio/audio.controller.ts:192:  async getReciterBySourceId(
src/modules/audio/audio.module.ts:9:import { AudioSyncService } from "./audio.sync.service";
src/modules/audio/recitations.controller.ts:39:  async getAudioByAyah(
src/modules/audio/recitations.controller.ts:100:  async getAudioByChapter(
src/modules/audio/audio.sync.service.ts:30:  async syncReciters(): Promise<AudioSyncResult> {
src/modules/audio/audio.sync.service.ts:36:      this.logger.log("Starting reciters sync from Quran.com API");
src/modules/audio/audio.sync.service.ts:44:      this.logger.log(`Found ${reciters.length} reciters to sync`);
src/modules/audio/audio.sync.service.ts:88:          const errorMsg = `Failed to sync reciter ${reciter.id}: ${error.message}`;
src/modules/audio/audio.sync.service.ts:94:      this.logger.log(`Successfully synced ${recitersProcessed} reciters`);
src/modules/audio/audio.sync.service.ts:96:      // Log sync job
src/modules/audio/audio.sync.service.ts:97:      await this.logSyncJob("reciters-sync", "reciters", "success", {
src/modules/audio/audio.sync.service.ts:110:      const errorMsg = `Reciters sync failed: ${error.message}`;
src/modules/audio/audio.sync.service.ts:114:      await this.logSyncJob("reciters-sync", "reciters", "failed", {
src/modules/audio/audio.sync.service.ts:131:  async syncAudioFilesForChapter(
src/modules/audio/audio.sync.service.ts:220:          const errorMsg = `Failed to sync audio file ${audioFile.verse_key}: ${error.message}`;
src/modules/audio/audio.sync.service.ts:227:        `Successfully synced ${audioFilesProcessed} audio files for chapter ${chapterId}`,
src/modules/audio/audio.sync.service.ts:238:      const errorMsg = `Audio files sync failed for reciter ${reciterId}, chapter ${chapterId}: ${error.message}`;
src/modules/audio/audio.sync.service.ts:255:  async syncAllAudioFiles(): Promise<AudioSyncResult> {
src/modules/audio/audio.sync.service.ts:261:      this.logger.log("Starting full audio files sync");
src/modules/audio/audio.sync.service.ts:263:      // First sync reciters
src/modules/audio/audio.sync.service.ts:264:      const recitersResult = await this.syncReciters();
src/modules/audio/audio.sync.service.ts:281:            const result = await this.syncAudioFilesForChapter(
src/modules/audio/audio.sync.service.ts:290:            const errorMsg = `Failed to sync audio for reciter ${reciter.sourceId}, chapter ${chapterId}: ${error.message}`;
src/modules/audio/audio.sync.service.ts:297:      // Log sync job
src/modules/audio/audio.sync.service.ts:298:      await this.logSyncJob("audio-files-sync", "audio_files", "success", {
src/modules/audio/audio.sync.service.ts:311:      const errorMsg = `Full audio files sync failed: ${error.message}`;
src/modules/audio/audio.sync.service.ts:315:      await this.logSyncJob("audio-files-sync", "audio_files", "failed", {
src/modules/audio/audio.sync.service.ts:341:   * Log sync job to database
src/modules/audio/audio.sync.service.ts:343:  private async logSyncJob(
src/modules/audio/audio.sync.service.ts:350:      await this.prisma.syncJobLog.create({
src/modules/audio/audio.sync.service.ts:363:      this.logger.error(`Failed to log sync job: ${error.message}`);
src/modules/audio/audio.service.ts:37:  async getVerseAudio(
src/modules/audio/audio.service.ts:154:  async getChapterAudio(
src/modules/audio/audio.service.ts:191:  async getAvailableQualities(): Promise<AudioQuality[]> {
src/modules/audio/audio.service.ts:236:  async getReciterAudioStats(reciterId: number): Promise<any> {
src/modules/audio/audio.service.ts:267:  async searchAudio(
src/modules/audio/audio.service.ts:345:  async validateAudioUrl(url: string): Promise<boolean> {
src/modules/audio/audio.service.ts:412:  private async generateFallbackAudioUrl(
src/modules/audio/audio.seed.service.ts:13:  async seedReciters(): Promise<void> {
src/modules/audio/audio.seed.service.ts:103:  async seedAudioFiles(): Promise<void> {
src/modules/audio/audio.seed.service.ts:196:  async runFullSeed(): Promise<void> {
src/modules/hadith/hadith-sync.service.ts:28:  private readonly syncProgress = new Map<string, SyncProgress>();
src/modules/hadith/hadith-sync.service.ts:37:  async scheduledSync(): Promise<void> {
src/modules/hadith/hadith-sync.service.ts:38:    this.logger.log("Starting scheduled hadith sync");
src/modules/hadith/hadith-sync.service.ts:41:      // Use the queue system for scheduled syncs to avoid blocking
src/modules/hadith/hadith-sync.service.ts:43:      this.logger.log("Scheduled hadith sync - delegating to queue system");
src/modules/hadith/hadith-sync.service.ts:45:      this.logger.error("Scheduled hadith sync failed", error.stack);
src/modules/hadith/hadith-sync.service.ts:49:  async syncAllCollections(): Promise<void> {
src/modules/hadith/hadith-sync.service.ts:50:    this.logger.log("Starting sync for all collections");
src/modules/hadith/hadith-sync.service.ts:70:        await this.syncCollection(sunnahCollection.name);
src/modules/hadith/hadith-sync.service.ts:73:      this.logger.log("All collections synced successfully");
src/modules/hadith/hadith-sync.service.ts:75:      this.logger.error("Failed to sync all collections", error.stack);
src/modules/hadith/hadith-sync.service.ts:80:  async syncCollection(collectionName: string): Promise<void> {
src/modules/hadith/hadith-sync.service.ts:81:    this.logger.log(`Starting sync for collection: ${collectionName}`);
src/modules/hadith/hadith-sync.service.ts:90:    this.syncProgress.set(collectionName, progress);
src/modules/hadith/hadith-sync.service.ts:96:        data: { syncStatus: "in_progress" },
src/modules/hadith/hadith-sync.service.ts:112:          syncStatus: "in_progress",
src/modules/hadith/hadith-sync.service.ts:122:          syncStatus: "in_progress",
src/modules/hadith/hadith-sync.service.ts:135:          await this.syncBooks(collection.id, collectionName, books);
src/modules/hadith/hadith-sync.service.ts:154:        await this.syncHadiths(collection.id, collectionName);
src/modules/hadith/hadith-sync.service.ts:159:        // Continue with sync even if hadiths can't be fetched
src/modules/hadith/hadith-sync.service.ts:162:      // Update sync status to completed
src/modules/hadith/hadith-sync.service.ts:166:          syncStatus: "ok",
src/modules/hadith/hadith-sync.service.ts:173:      this.logger.log(`Collection ${collectionName} synced successfully`);
src/modules/hadith/hadith-sync.service.ts:176:        `Failed to sync collection ${collectionName}`,
src/modules/hadith/hadith-sync.service.ts:180:      // Update sync status to failed
src/modules/hadith/hadith-sync.service.ts:183:        data: { syncStatus: "failed" },
src/modules/hadith/hadith-sync.service.ts:192:      this.syncProgress.set(collectionName, progress);
src/modules/hadith/hadith-sync.service.ts:196:  private async syncBooks(
src/modules/hadith/hadith-sync.service.ts:235:  private async syncHadiths(
src/modules/hadith/hadith-sync.service.ts:239:    this.logger.log(`Starting hadith sync for collection ${collectionName}`);
src/modules/hadith/hadith-sync.service.ts:288:        `Completed hadith sync for collection ${collectionName}. Total: ${totalHadiths} hadiths`,
src/modules/hadith/hadith-sync.service.ts:292:        `Hadith sync failed for collection ${collectionName} (API key limitation): ${error.message}`,
src/modules/hadith/hadith-sync.service.ts:298:  private async processHadithBatch(
src/modules/hadith/hadith-sync.service.ts:316:  private async processSingleHadith(
src/modules/hadith/hadith-sync.service.ts:394:        this.syncProgress.get(collectionName) || {
src/modules/hadith/hadith-sync.service.ts:401:    return this.syncProgress;
src/modules/hadith/hadith-sync.service.ts:404:  async getSyncStatus(): Promise<{
src/modules/hadith/hadith-sync.service.ts:407:      syncStatus: string;
src/modules/hadith/hadith-sync.service.ts:415:        syncStatus: true,
src/modules/hadith/hadith.controller.ts:39:  async getCollections(@Query("lang") lang: string = "en") {
src/modules/hadith/hadith.controller.ts:61:  async getBooks(
src/modules/hadith/hadith.controller.ts:96:  async getHadiths(
src/modules/hadith/hadith.controller.ts:152:  async searchHadiths(
src/modules/hadith/hadith.controller.ts:199:  async getHadithById(
src/modules/hadith/hadith.controller.ts:231:  async getHadithByNumber(
src/modules/hadith/hadith.controller.ts:271:  async importFromSqlDump(@Query("file_path") filePath: string) {
src/modules/hadith/hadith.controller.ts:301:  async getImportStats() {
src/modules/hadith/hadith.service.ts:13:  syncStatus: string;
src/modules/hadith/hadith.service.ts:51:  async getCollections(lang: string = "en"): Promise<HadithCollection[]> {
src/modules/hadith/hadith.service.ts:69:  async getBooks(
src/modules/hadith/hadith.service.ts:91:  async getHadiths(
src/modules/hadith/hadith.service.ts:140:  async searchHadiths(
src/modules/hadith/hadith.service.ts:196:  async getHadithById(
src/modules/hadith/hadith.service.ts:217:  async getHadithByNumber(
src/modules/hadith/hadith-import.service.ts:29:  async importFromSqlDump(dumpFilePath: string): Promise<HadithImportResult> {
src/modules/hadith/hadith-import.service.ts:94:  private async readSqlDump(filePath: string): Promise<string> {
src/modules/hadith/hadith-import.service.ts:313:  private async processCollection(
src/modules/hadith/hadith-import.service.ts:330:        syncStatus: "completed",
src/modules/hadith/hadith-import.service.ts:338:        syncStatus: "completed",
src/modules/hadith/hadith-import.service.ts:368:  private async processBook(
src/modules/hadith/hadith-import.service.ts:414:  private async processHadithBatch(
src/modules/hadith/hadith-import.service.ts:434:  private async processHadith(
src/modules/hadith/hadith-import.service.ts:514:  async getImportStats(): Promise<any> {
src/modules/hadith/admin-hadith.controller.ts:9:import { HadithSyncService } from "./hadith-sync.service";
src/modules/hadith/admin-hadith.controller.ts:23:  @ApiOperation({ summary: "List collections with sync status and counts" })
src/modules/hadith/admin-hadith.controller.ts:25:  async getCollections() {
src/modules/hadith/admin-hadith.controller.ts:26:    const syncStatus = await this.hadithSyncService.getSyncStatus();
src/modules/hadith/admin-hadith.controller.ts:30:      syncStatus.collections.map(async (collection) => {
src/modules/hadith/admin-hadith.controller.ts:103:  @Post("sync/:collectionName")
src/modules/hadith/admin-hadith.controller.ts:104:  @ApiOperation({ summary: "Trigger manual sync for a specific collection" })
src/modules/hadith/admin-hadith.controller.ts:107:  async syncCollection(@Param("collectionName") collectionName: string) {
src/modules/hadith/admin-hadith.controller.ts:109:      // Start sync in background
src/modules/hadith/admin-hadith.controller.ts:110:      this.hadithSyncService.syncCollection(collectionName).catch((error) => {
src/modules/hadith/admin-hadith.controller.ts:111:        console.error(`Background sync failed for ${collectionName}:`, error);
src/modules/hadith/admin-hadith.controller.ts:122:        error: `Failed to start sync for collection ${collectionName}: ${error.message}`,
src/modules/hadith/admin-hadith.controller.ts:127:  @Post("sync-all")
src/modules/hadith/admin-hadith.controller.ts:128:  @ApiOperation({ summary: "Trigger manual sync for all collections" })
src/modules/hadith/admin-hadith.controller.ts:130:  async syncAllCollections() {
src/modules/hadith/admin-hadith.controller.ts:132:      // Start sync in background
src/modules/hadith/admin-hadith.controller.ts:133:      this.hadithSyncService.syncAllCollections().catch((error) => {
src/modules/hadith/admin-hadith.controller.ts:134:        console.error("Background sync failed:", error);
src/modules/hadith/admin-hadith.controller.ts:144:        error: `Failed to start sync: ${error.message}`,
src/modules/hadith/admin-hadith.controller.ts:150:  @ApiOperation({ summary: "Get sync progress for a specific collection" })
src/modules/hadith/admin-hadith.controller.ts:152:  async getSyncStatus(@Param("collectionName") collectionName: string) {
src/modules/hadith/admin-hadith.controller.ts:162:  @ApiOperation({ summary: "Get sync progress for all collections" })
src/modules/hadith/admin-hadith.controller.ts:164:  async getAllSyncStatus() {
src/modules/hadith/admin-hadith.controller.ts:188:  async verifyTranslation(
src/modules/hadith/admin-hadith.controller.ts:240:  async triggerBulkTranslation(
src/modules/hadith/admin-hadith.controller.ts:270:  async getTranslationStats() {
src/modules/hadith/admin-hadith.controller.ts:282:  async retryFailedTranslations() {
src/modules/hadith/admin-hadith.controller.ts:322:  async getTranslationJobs(
src/modules/hadith/admin-hadith.controller.ts:348:      jobs.map(async (job) => {
src/modules/hadith/hadith.module.ts:11:import { HadithSyncService } from "./hadith-sync.service";
src/modules/hadith/translation.service.ts:22:  async translateText(
src/modules/hadith/translation.service.ts:56:  private async performTranslation(
src/modules/hadith/translation.service.ts:88:  async processTranslationJob(jobData: {
src/modules/hadith/translation.service.ts:156:  async triggerBulkTranslation(options: {
src/modules/hadith/translation.service.ts:196:          batch.map(async (hadith) => {
src/modules/hadith/translation.service.ts:237:  async getTranslationStats(): Promise<{
src/modules/hadith/translation.service.ts:267:  async retryFailedTranslations(): Promise<void> {
src/modules/hadith/sunnah-api.service.ts:96:  private async enforceRateLimit(): Promise<void> {
src/modules/hadith/sunnah-api.service.ts:115:  private async makeRequest<T>(url: string, retries = 3): Promise<T> {
src/modules/hadith/sunnah-api.service.ts:186:  async getCollections(): Promise<SunnahCollection[]> {
src/modules/hadith/sunnah-api.service.ts:204:  async getBooks(collectionName: string): Promise<SunnahBook[]> {
src/modules/hadith/sunnah-api.service.ts:224:  async getHadiths(
src/modules/hadith/sunnah-api.service.ts:248:  async getHadithsByBook(
src/modules/hadith/sunnah-api.service.ts:268:  async getHadithByNumber(
src/modules/hadith/sunnah-api.service.ts:286:  async searchHadiths(
src/modules/hadith/sunnah-api.service.ts:310:  async getCollectionInfo(collectionName: string): Promise<SunnahCollection> {
src/modules/hadith/hadith-sync.service.spec.ts:3:import { HadithSyncService } from "./hadith-sync.service";
src/modules/hadith/hadith-sync.service.spec.ts:46:  beforeEach(async () => {
src/modules/hadith/hadith-sync.service.spec.ts:82:  describe("syncCollection", () => {
src/modules/hadith/hadith-sync.service.spec.ts:83:    it("should sync a collection successfully", async () => {
src/modules/hadith/hadith-sync.service.spec.ts:144:      await service.syncCollection(collectionName);
src/modules/hadith/hadith-sync.service.spec.ts:162:    it("should handle sync errors gracefully", async () => {
src/modules/hadith/hadith-sync.service.spec.ts:168:      await expect(service.syncCollection(collectionName)).rejects.toThrow(
src/modules/hadith/hadith-sync.service.spec.ts:175:    it("should return sync status for all collections", async () => {
src/modules/hadith/hadith-sync.service.spec.ts:179:          syncStatus: "ok",
src/modules/hadith/hadith-sync.service.spec.ts:185:          syncStatus: "pending",
src/modules/hadith/hadith-sync.service.spec.ts:201:          syncStatus: true,
src/modules/finance/goldprice.controller.ts:25:  async getLatest(
src/modules/finance/goldprice.controller.ts:71:  async getHistory(
src/modules/finance/goldprice.controller.ts:98:  @Post("admin/sync/gold-prices")
src/modules/finance/goldprice.controller.ts:105:  async triggerManual() {
src/modules/finance/goldprice.scheduler.ts:15:  async handleDailyScrape() {
src/modules/finance/goldprice.service.ts:26:  async fetchAndStore(now: Date = new Date()): Promise<{ inserted: number }> {
src/modules/finance/goldprice.service.ts:27:    const job = await this.client.syncJobLog.create({
src/modules/finance/goldprice.service.ts:45:      await this.client.syncJobLog.update({
src/modules/finance/goldprice.service.ts:58:      await this.client.syncJobLog.update({
src/modules/finance/goldprice.service.ts:67:      this.logger.error(`Gold price sync failed: ${err?.message ?? err}`);
src/modules/finance/goldprice.service.ts:72:  private async persistParsedPrices(
src/modules/finance/goldprice.service.ts:110:  async getLatest(): Promise<
src/modules/finance/goldprice.service.ts:163:  async getHistory(params: {
src/modules/zakat/zakat.service.ts:46:  async getNisabValues(currency: string = "USD"): Promise<NisabValues> {
src/modules/zakat/zakat.service.ts:76:  async calculateZakat(
src/modules/zakat/zakat.service.ts:121:  async getGoldPrice(currency: string = "USD"): Promise<GoldPrice> {
src/modules/zakat/zakat.service.ts:161:  async getSupportedCurrencies(): Promise<string[]> {
src/modules/zakat/zakat.service.ts:177:  async getZakatHistory(userId?: string): Promise<any[]> {
src/modules/zakat/zakat.service.ts:184:  async saveZakatCalculation(
src/modules/zakat/zakat.controller.ts:30:  async getNisabValues(@Query("currency") currency: string = "USD") {
src/modules/zakat/zakat.controller.ts:47:  async calculateZakat(@Body() dto: CalculateZakatDto) {
src/modules/zakat/zakat.controller.ts:103:  async getGoldPrice(@Query("currency") currency: string = "USD") {
src/modules/zakat/zakat.controller.ts:121:  async getSupportedCurrencies() {
src/modules/zakat/zakat.controller.ts:143:  async getZakatHistory(@Query("userId") userId?: string) {
